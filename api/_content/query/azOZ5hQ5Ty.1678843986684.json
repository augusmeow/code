{"_path":"/notes/gcc","_dir":"notes","_draft":false,"_partial":false,"_locale":"","_empty":false,"title":"gcc","description":"版本对应","icon":"twemoji:building-construction","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"gcc"},"children":[{"type":"text","value":"gcc"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html","rel":["nofollow"]},"children":[{"type":"text","value":"版本对应"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gcc"}]},{"type":"text","value":" 与 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"g++"}]},{"type":"text","value":" 分别是 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gnu"}]},{"type":"text","value":" 的 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"c/c++"}]},{"type":"text","value":" 编译器 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gcc/g++"}]},{"type":"text","value":" 在执行编译工作的时候，总共需要4步："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"预处理, 生成 .i 的文件"},{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"预处理器cpp"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"将预处理后的文件转换成汇编语言, 生成文件 .s "},{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"编译器egcs"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"有汇编变为目标代码(机器代码)生成 .o 的文件"},{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"汇编器as"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"连接目标代码, 生成可执行程序 "},{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"链接器ld"}]}]}]},{"type":"element","tag":"h2","props":{"id":"gcc-命令的常用选项"},"children":[{"type":"text","value":"gcc 命令的常用选项"}]},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{"align":null},"children":[{"type":"text","value":"选项"}]},{"type":"element","tag":"th","props":{"align":null},"children":[{"type":"text","value":"解释"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-ansi"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"只支持 ANSI 标准的 C 语法。这一选项将禁止 GNU C 的某些特色， 例如 asm 或 typeof 关键词。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-c"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"只编译并生成目标文件。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-DMACRO"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"以字符串\"1\"定义 MACRO 宏。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-DMACRO=DEFN"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"以字符串\"DEFN\"定义 MACRO 宏。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-E"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"只运行 C 预编译器。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-g"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"生成调试信息。GNU 调试器可利用该信息。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-IDIRECTORY"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"指定额外的头文件搜索路径DIRECTORY。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-LDIRECTORY"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"指定额外的函数库搜索路径DIRECTORY。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-lLIBRARY"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"连接时搜索指定的函数库LIBRARY。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-m486"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"针对 486 进行代码优化。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-o FILE"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"生成指定的输出文件。用在生成可执行文件时。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-O0"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"不进行优化处理。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-O"}]},{"type":"text","value":" 或 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-O1"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"优化生成代码。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-O2"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"进一步优化。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-O3"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"比 -O2 更进一步优化，包括 inline 函数。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-shared"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"生成共享目标文件。通常用在建立共享库时。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-static"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"禁止使用共享连接。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-UMACRO"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"取消对 MACRO 宏的定义。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-w"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"不生成任何警告信息。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-Wall"}]}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"生成所有警告信息。"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"参数详解"},"children":[{"type":"text","value":"参数详解"}]},{"type":"element","tag":"h3","props":{"id":"x-language-filename"},"children":[{"type":"text","value":"-x language filename"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"设定文件所使用的语言, 使后缀名无效, 对以后的多个有效。也就是根据约定 C 语言的后缀名称是 .c 的，而 C++ 的后缀名是 .C 或者 .cpp, 如果你很个性，决定你的 C 代码文件的后缀名是 .pig 哈哈，那你就要用这个参数, 这个参数对他后面的文件名都起作用，除非到了下一个参数的使用。 可以使用的参数吗有下面的这些：'c', 'objective-c', 'c-header', 'c++', 'cpp-output', 'assembler', 与 'assembler-with-cpp'。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n看到英文，应该可以理解的。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n例子用法:"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gcc -x c hello.pig"}]},{"type":"text","value":"\n　　"}]},{"type":"element","tag":"h3","props":{"id":"x-none-filename"},"children":[{"type":"text","value":"-x none filename"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"关掉上一个选项，也就是让gcc根据文件名后缀，自动识别文件类型 。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n例子用法:"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gcc -x c hello.pig -x none hello2.c"}]},{"type":"text","value":"\n　　"}]},{"type":"element","tag":"h3","props":{"id":"c"},"children":[{"type":"text","value":"-c"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"只激活预处理,编译,和汇编,也就是他只把程序做成obj文件"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n例子用法:"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gcc -c hello.c"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n他将生成 .o 的 obj 文件"}]},{"type":"element","tag":"h3","props":{"id":"s"},"children":[{"type":"text","value":"-S"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"只激活预处理和编译，就是指把文件编译成为汇编代码。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n例子用法:"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gcc -S hello.c"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n他将生成 .s 的汇编代码，你可以用文本编辑器察看。"}]},{"type":"element","tag":"h3","props":{"id":"e"},"children":[{"type":"text","value":"-E"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"只激活预处理,这个不生成文件, 你需要把它重定向到一个输出文件里面。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n例子用法:"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gcc -E hello.c > pianoapan.txt"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gcc -E hello.c | more"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n慢慢看吧, 一个 hello word 也要与处理成800行的代码。"}]},{"type":"element","tag":"h3","props":{"id":"o"},"children":[{"type":"text","value":"-o"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"制定目标名称, 默认的时候, gcc 编译出来的文件是 a.out, 很难听, 如果你和我有同感，改掉它, 哈哈。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n例子用法:"}]},{"type":"element","tag":"code","props":{"code":"gcc -o hello.exe hello.c #(哦,windows用习惯了) \n　　gcc -o hello.asm -S hello.c\n","language":"shell","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-140735"},"children":[{"type":"text","value":"gcc"}]},{"type":"element","tag":"span","props":{"class":"ct-1e4d5c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-6b9904"},"children":[{"type":"text","value":"-o"}]},{"type":"element","tag":"span","props":{"class":"ct-1e4d5c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-d63b6d"},"children":[{"type":"text","value":"hello.exe"}]},{"type":"element","tag":"span","props":{"class":"ct-1e4d5c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-d63b6d"},"children":[{"type":"text","value":"hello.c"}]},{"type":"element","tag":"span","props":{"class":"ct-1e4d5c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-370925"},"children":[{"type":"text","value":"#(哦,windows用习惯了) "}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-1e4d5c"},"children":[{"type":"text","value":"　　"}]},{"type":"element","tag":"span","props":{"class":"ct-140735"},"children":[{"type":"text","value":"gcc"}]},{"type":"element","tag":"span","props":{"class":"ct-1e4d5c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-6b9904"},"children":[{"type":"text","value":"-o"}]},{"type":"element","tag":"span","props":{"class":"ct-1e4d5c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-d63b6d"},"children":[{"type":"text","value":"hello.asm"}]},{"type":"element","tag":"span","props":{"class":"ct-1e4d5c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-6b9904"},"children":[{"type":"text","value":"-S"}]},{"type":"element","tag":"span","props":{"class":"ct-1e4d5c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-d63b6d"},"children":[{"type":"text","value":"hello.c"}]}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"pipe"},"children":[{"type":"text","value":"-pipe"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　\n使用管道代替编译中临时文件, 在使用非 gnu 汇编工具的时候, 可能有些问题。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gcc -pipe -o hello.exe hello.c"}]}]},{"type":"element","tag":"h3","props":{"id":"ansi"},"children":[{"type":"text","value":"-ansi"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"关闭 gnu c中与 ansi c 不兼容的特性, 激活 ansi c 的专有特性（包括禁止一些 asm inline typeof 关键字, 以及 UNIX,vax 等预处理宏）。"}]},{"type":"element","tag":"h3","props":{"id":"fno-asm"},"children":[{"type":"text","value":"-fno-asm"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"此选项实现 ansi 选项的功能的一部分，它禁止将 asm, inline 和 typeof 用作关键字。"}]},{"type":"element","tag":"h3","props":{"id":"fno-strict-prototype"},"children":[{"type":"text","value":"-fno-strict-prototype"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"只对 g++ 起作用, 使用这个选项, g++ 将对不带参数的函数,都认为是没有显式的对参数的个数和类型说明,而不是没有参数。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n而 gcc 无论是否使用这个参数, 都将对没有带参数的函数, 认为城没有显式说明的类型。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"fthis-is-varialble"},"children":[{"type":"text","value":"-fthis-is-varialble"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"就是向传统 c++ 看齐, 可以使用 this 当一般变量使用。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"fcond-mismatch"},"children":[{"type":"text","value":"-fcond-mismatch"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"允许条件表达式的第二和第三参数类型不匹配, 表达式的值将为 void 类型。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"funsigned-char-fno-signed-char-fsigned-char-fno-unsigned-char"},"children":[{"type":"text","value":"-funsigned-char 、-fno-signed-char、-fsigned-char 、-fno-unsigned-char"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这四个参数是对 char 类型进行设置, 决定将 char 类型设置成 unsigned char(前两个参数)或者 signed char(后两个参数)。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"include-file"},"children":[{"type":"text","value":"-include file"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"包含某个代码,简单来说,就是便以某个文件,需要另一个文件的时候,就可以用它设定,功能就相当于在代码中使用 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"#include<filename>"}]},{"type":"text","value":"。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n例子用法:\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gcc hello.c -include /root/pianopan.h"}]},{"type":"text","value":"\n　　"}]},{"type":"element","tag":"h3","props":{"id":"imacros-file"},"children":[{"type":"text","value":"-imacros file"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　\n将 file 文件的宏, 扩展到 gcc/g++ 的输入文件, 宏定义本身并不出现在输入文件中。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"dmacro"},"children":[{"type":"text","value":"-Dmacro"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"相当于 C 语言中的 #define macro\n　　"}]},{"type":"element","tag":"h3","props":{"id":"dmacrodefn"},"children":[{"type":"text","value":"-Dmacro=defn"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"相当于 C 语言中的 #define macro=defn\n　　"}]},{"type":"element","tag":"h3","props":{"id":"umacro"},"children":[{"type":"text","value":"-Umacro"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"相当于 C 语言中的 #undef macro"}]},{"type":"element","tag":"h3","props":{"id":"undef"},"children":[{"type":"text","value":"-undef"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　\n取消对任何非标准宏的定义\n　　"}]},{"type":"element","tag":"h3","props":{"id":"idir"},"children":[{"type":"text","value":"-Idir"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在你是用 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"#include \"file\""}]},{"type":"text","value":" 的时候, gcc/g++ 会先在当前目录查找你所制定的头文件, 如果没有找到, 他回到默认的头文件目录找, 如果使用 -I 制定了目录,他会先在你所制定的目录查找, 然后再按常规的顺序去找。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n对于 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"#include<file>"}]},{"type":"text","value":", gcc/g++ 会到 -I 制定的目录查找, 查找不到, 然后将到系统的默认的头文件目录查找 。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"i"},"children":[{"type":"text","value":"-I-"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　\n就是取消前一个参数的功能, 所以一般在 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-Idir"}]},{"type":"text","value":" 之后使用。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"idirafter-dir"},"children":[{"type":"text","value":"-idirafter dir"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 -I 的目录里面查找失败, 讲到这个目录里面查找。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"iprefix-prefix-iwithprefix-dir"},"children":[{"type":"text","value":"-iprefix prefix 、-iwithprefix dir"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一般一起使用, 当 -I 的目录查找失败, 会到 prefix+dir 下查找\n　　"}]},{"type":"element","tag":"h3","props":{"id":"nostdinc"},"children":[{"type":"text","value":"-nostdinc"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　\n使编译器不再系统默认的头文件目录里面找头文件, 一般和 -I 联合使用,明确限定头文件的位置。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"nostdin-c"},"children":[{"type":"text","value":"-nostdin C++"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"规定不在 g++ 指定的标准路经中搜索, 但仍在其他路径中搜索, 此选项在创 libg++ 库使用 。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"c-1"},"children":[{"type":"text","value":"-C"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在预处理的时候, 不删除注释信息, 一般和-E使用, 有时候分析程序，用这个很方便的。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"m"},"children":[{"type":"text","value":"-M"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"生成文件关联的信息。包含目标文件所依赖的所有源代码你可以用 gcc -M hello.c 来测试一下，很简单。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"mm"},"children":[{"type":"text","value":"-MM"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"和上面的那个一样，但是它将忽略由 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"#include<file>"}]},{"type":"text","value":" 造成的依赖关系。"}]},{"type":"element","tag":"h3","props":{"id":"md"},"children":[{"type":"text","value":"-MD"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"和-M相同，但是输出将导入到.d的文件里面"}]},{"type":"element","tag":"h3","props":{"id":"mmd"},"children":[{"type":"text","value":"-MMD"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"和 -MM 相同，但是输出将导入到 .d 的文件里面。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"waoption"},"children":[{"type":"text","value":"-Wa,option"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"此选项传递 option 给汇编程序; 如果 option 中间有逗号, 就将 option 分成多个选项, 然 后传递给会汇编程序。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"wloption"},"children":[{"type":"text","value":"-Wl.option"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"此选项传递 option 给连接程序; 如果 option 中间有逗号, 就将 option 分成多个选项, 然 后传递给会连接程序。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"llibrary"},"children":[{"type":"text","value":"-llibrary"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"制定编译的时候使用的库"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n例子用法"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gcc -lcurses hello.c"}]},{"type":"text","value":"\n　　\n使用 ncurses 库编译程序\n　　"}]},{"type":"element","tag":"h3","props":{"id":"ldir"},"children":[{"type":"text","value":"-Ldir"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　\n制定编译的时候，搜索库的路径。比如你自己的库，可以用它制定目录，不然编译器将只在标准库的目录找。这个dir就是目录的名称。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"o0-o1-o2-o3"},"children":[{"type":"text","value":"-O0 、-O1 、-O2 、-O3"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　\n编译器的优化选项的 4 个级别，-O0 表示没有优化, -O1 为默认值，-O3 优化级别最高。"}]},{"type":"element","tag":"h3","props":{"id":"g"},"children":[{"type":"text","value":"-g"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　\n只是编译器，在编译的时候，产生调试信息。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"gstabs"},"children":[{"type":"text","value":"-gstabs"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　\n此选项以 stabs 格式声称调试信息, 但是不包括 gdb 调试信息。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"gstabs-1"},"children":[{"type":"text","value":"-gstabs+"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　\n此选项以 stabs 格式声称调试信息, 并且包含仅供 gdb 使用的额外调试信息。\n　　"}]},{"type":"element","tag":"h3","props":{"id":"ggdb"},"children":[{"type":"text","value":"-ggdb"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　\n此选项将尽可能的生成 gdb 的可以使用的调试信息。"}]},{"type":"element","tag":"h3","props":{"id":"static"},"children":[{"type":"text","value":"-static"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　\n此选项将禁止使用动态库，所以，编译出来的东西，一般都很大，也不需要什么动态连接库，就可以运行。"}]},{"type":"element","tag":"h3","props":{"id":"share"},"children":[{"type":"text","value":"-share"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"此选项将尽量使用动态库，所以生成文件比较小，但是需要系统由动态库。"}]},{"type":"element","tag":"h3","props":{"id":"traditional"},"children":[{"type":"text","value":"-traditional"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　\n试图让编译器支持传统的C语言特性。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GCC 是 GNU 的 C 和 C++ 编译器。实际上，GCC 能够编译三种语言：C、C++ 和 Object C（C 语言的一种面向对象扩展）。利用 gcc 命令可同时编译并连接 C 和 C++ 源程序。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n如果你有两个或少数几个 C 源文件，也可以方便地利用 GCC 编译、连接并生成可执行文件。"}]},{"type":"element","tag":"style","children":[{"type":"text","value":".ct-370925{color:#6E7781}\n.ct-d63b6d{color:#0A3069}\n.ct-6b9904{color:#0550AE}\n.ct-1e4d5c{color:#24292F}\n.ct-140735{color:#953800}\n.dark .ct-140735{color:#FFA657}\n.dark .ct-1e4d5c{color:#C9D1D9}\n.dark .ct-6b9904{color:#79C0FF}\n.dark .ct-d63b6d{color:#A5D6FF}\n.dark .ct-370925{color:#8B949E}"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"gcc-命令的常用选项","depth":2,"text":"gcc 命令的常用选项"},{"id":"参数详解","depth":2,"text":"参数详解","children":[{"id":"x-language-filename","depth":3,"text":"-x language filename"},{"id":"x-none-filename","depth":3,"text":"-x none filename"},{"id":"c","depth":3,"text":"-c"},{"id":"s","depth":3,"text":"-S"},{"id":"e","depth":3,"text":"-E"},{"id":"o","depth":3,"text":"-o"},{"id":"pipe","depth":3,"text":"-pipe"},{"id":"ansi","depth":3,"text":"-ansi"},{"id":"fno-asm","depth":3,"text":"-fno-asm"},{"id":"fno-strict-prototype","depth":3,"text":"-fno-strict-prototype"},{"id":"fthis-is-varialble","depth":3,"text":"-fthis-is-varialble"},{"id":"fcond-mismatch","depth":3,"text":"-fcond-mismatch"},{"id":"funsigned-char-fno-signed-char-fsigned-char-fno-unsigned-char","depth":3,"text":"-funsigned-char 、-fno-signed-char、-fsigned-char 、-fno-unsigned-char"},{"id":"include-file","depth":3,"text":"-include file"},{"id":"imacros-file","depth":3,"text":"-imacros file"},{"id":"dmacro","depth":3,"text":"-Dmacro"},{"id":"dmacrodefn","depth":3,"text":"-Dmacro=defn"},{"id":"umacro","depth":3,"text":"-Umacro"},{"id":"undef","depth":3,"text":"-undef"},{"id":"idir","depth":3,"text":"-Idir"},{"id":"i","depth":3,"text":"-I-"},{"id":"idirafter-dir","depth":3,"text":"-idirafter dir"},{"id":"iprefix-prefix-iwithprefix-dir","depth":3,"text":"-iprefix prefix 、-iwithprefix dir"},{"id":"nostdinc","depth":3,"text":"-nostdinc"},{"id":"nostdin-c","depth":3,"text":"-nostdin C++"},{"id":"c-1","depth":3,"text":"-C"},{"id":"m","depth":3,"text":"-M"},{"id":"mm","depth":3,"text":"-MM"},{"id":"md","depth":3,"text":"-MD"},{"id":"mmd","depth":3,"text":"-MMD"},{"id":"waoption","depth":3,"text":"-Wa,option"},{"id":"wloption","depth":3,"text":"-Wl.option"},{"id":"llibrary","depth":3,"text":"-llibrary"},{"id":"ldir","depth":3,"text":"-Ldir"},{"id":"o0-o1-o2-o3","depth":3,"text":"-O0 、-O1 、-O2 、-O3"},{"id":"g","depth":3,"text":"-g"},{"id":"gstabs","depth":3,"text":"-gstabs"},{"id":"gstabs-1","depth":3,"text":"-gstabs+"},{"id":"ggdb","depth":3,"text":"-ggdb"},{"id":"static","depth":3,"text":"-static"},{"id":"share","depth":3,"text":"-share"},{"id":"traditional","depth":3,"text":"-traditional"}]}]}},"_type":"markdown","_id":"content:5.notes:gcc.md","_source":"content","_file":"5.notes/gcc.md","_extension":"md"}