{"_path":"/cpp/feature","_dir":"cpp","_draft":false,"_partial":false,"_locale":"","_empty":false,"title":"C++ Feature","description":"","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"c-feature"},"children":[{"type":"text","value":"C++ Feature"}]},{"type":"element","tag":"h2","props":{"id":"c-11-有什么新特性"},"children":[{"type":"text","value":"C++ 11 有什么新特性"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"与之前的版本相比，C++11增加了许多新的特性，包括："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"新的类型：C++11增加了多种新的类型，例如auto和decltype，它们可以让程序员更容易地定义变量。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"字面常量：C++11提供了新的字面常量，例如nullptr和u8\"hello\"，它们可以让程序员更方便地声明和使用指针和字符串。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"智能指针：C++11提供了多种新的智能指针，例如unique_ptr和shared_ptr，它们可以自动管理内存，避免出现内存泄漏和野指针等错误。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"./concept#lambda-%E5%87%BD%E6%95%B0%E7%9A%84%E7%89%B9%E7%82%B9%E5%92%8C%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E7%9B%B8%E6%AF%94%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%82%B9"},"children":[{"type":"text","value":"Lambda表达式"}]},{"type":"text","value":"：C++11增加了Lambda表达式，它可以让程序员在代码中定义和使用匿名函数。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"新的容器：C++11增加了多种新的容器，例如unordered_map和array，它们可以提高容器的性能和使用方便性。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"多线程支持：C++11增加了对多线程的支持，它提供了一系列的多线程库，可以让程序员方便地编写多线程程序。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"除了以上特性之外，C++11还增加了许多其他的特性，例如对默认构造函数、拷贝构造函数、赋值运算符和移动运算符的编译器自动生成（叫做\"自动类型推导\"），以及对Unicode字符集的支持等等。"}]},{"type":"element","tag":"h3","props":{"id":"线程库"},"children":[{"type":"text","value":"线程库"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"C++11中提供了一个多线程库，它可以让程序员在C++代码中创建和管理多线程。这个库包含了许多类和函数，可以用来操作线程、互斥量、条件变量和其他的同步对象。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下面是一个简单的C++11多线程程序的例子，它创建了两个线程，分别打印\"hello\"和\"world\"："}]},{"type":"element","tag":"code","props":{"code":"#include <iostream>\n#include <thread>\n\nint main() {\n  std::thread t1([]() { std::cout << \"hello\" << std::endl; });\n  std::thread t2([]() { std::cout << \"world\" << std::endl; });\n\n  t1.join();\n  t2.join();\n\n  return 0;\n}\n","language":"cpp","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"#include"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-b4b021"},"children":[{"type":"text","value":"<iostream>"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"#include"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-b4b021"},"children":[{"type":"text","value":"<thread>"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"main"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"() {"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::thread "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"t1"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"([]() { "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::cout "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<<"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-b4b021"},"children":[{"type":"text","value":"\"hello\""}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<<"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::endl; });"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::thread "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"t2"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"([]() { "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::cout "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<<"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-b4b021"},"children":[{"type":"text","value":"\"world\""}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<<"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::endl; });"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  t1."}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"join"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"();"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  t2."}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"join"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"();"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-c3ecea"},"children":[{"type":"text","value":"0"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在这个程序中，我们使用了"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::thread"}]},{"type":"text","value":"类来创建新的线程，并使用"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"join()"}]},{"type":"text","value":"函数来等待线程结束。由于C++11的多线程库包含了许多类和函数，所以可以支持多种多线程编程模型，比如生产者-消费者模型、同步-异步模型等等。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在C++11中，如果想要使用多线程库，需要在代码中包含"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<thread>"}]},{"type":"text","value":"头文件。这个头文件包含了所有多线程库的声明，并且提供了一些宏定义和常量，可以用来查询系统的多线程支持情况。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"例如，可以使用"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::thread::hardware_concurrency()"}]},{"type":"text","value":"函数来获取系统的最大线程数，或者使用"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::this_thread::get_id()"}]},{"type":"text","value":"函数来获取当前线程的标识符，等等。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"除了"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<thread>"}]},{"type":"text","value":"头文件之外，C++11的多线程库还包含了其他几个头文件，它们可以用来实现更为复杂的多线程程序。例如，"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<mutex>"}]},{"type":"text","value":"头文件包含了互斥量类型和函数，可以用来保证多个线程对共享数据的互斥访问；"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<future>"}]},{"type":"text","value":"头文件包含了"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"future"}]},{"type":"text","value":"和"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"promise"}]},{"type":"text","value":"类型，可以用来实现线程间的同步和通信等等。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"总之，C++11的多线程库为C++程序员提供了一系列的工具和类型，可以让他们编写高性能的多线程程序。"}]},{"type":"element","tag":"h3","props":{"id":"智能指针"},"children":[{"type":"text","value":"智能指针"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"智能指针是一种智能指针类型，它在管理内存时具有智能化的行为。普通的指针只能表示一个内存地址，而智能指针则具有自动释放内存和避免野指针等特性。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在C++11中，智能指针主要由两个模板类实现："},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::unique_ptr"}]},{"type":"text","value":"和"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::shared_ptr"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::unique_ptr"}]},{"type":"text","value":"表示一个独占的指针，它管理的内存在任何时候都只能被一个指针所指向。例如，当一个"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::unique_ptr"}]},{"type":"text","value":"对象被析构时，它所管理的内存会被自动释放。\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::shared_ptr"}]},{"type":"text","value":"表示一个共享的指针，它管理的内存可以被多个指针所指向。例如，当一个"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::shared_ptr"}]},{"type":"text","value":"对象的引用计数变为0时，它所管理的内存会被自动释放。\n下面是一个使用"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::unique_ptr"}]},{"type":"text","value":"的简单示例："}]},{"type":"element","tag":"code","props":{"code":"#include <iostream>\n#include <memory>\n\nint main() {\n  std::unique_ptr<int> p(new int(5));  // 声明一个独占指针，并分配一个int类型的对象\n  std::cout << *p << std::endl;  // 输出指针指向的对象的值\n\n  return 0;\n}\n","language":"cpp","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"#include"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-b4b021"},"children":[{"type":"text","value":"<iostream>"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"#include"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-b4b021"},"children":[{"type":"text","value":"<memory>"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"main"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"() {"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::unique_ptr"}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<int>"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"p"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"new"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-c3ecea"},"children":[{"type":"text","value":"5"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"));"}]},{"type":"element","tag":"span","props":{"class":"ct-ad4a3f"},"children":[{"type":"text","value":"  // 声明一个独占指针，并分配一个int类型的对象"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::cout "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<<"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"*"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"p "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<<"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::endl;"}]},{"type":"element","tag":"span","props":{"class":"ct-ad4a3f"},"children":[{"type":"text","value":"  // 输出指针指向的对象的值"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-c3ecea"},"children":[{"type":"text","value":"0"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在这个程序中，我们声明了一个"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::unique_ptr"}]},{"type":"text","value":"类型的指针p，并使用它来指向一个int类型的内存。我们可以通过解引用指针的方式来访问指针指向的对象，就像使用普通指针一样。当程序执行完毕，智能指针p会被析构，它所管理的内存就会被自动释放，避免了内存泄漏。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"另一个模板类"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::shared_ptr"}]},{"type":"text","value":"的用法也非常相似，下面是一个使用"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::shared_ptr"}]},{"type":"text","value":"的简单示例："}]},{"type":"element","tag":"code","props":{"code":"#include <iostream>\n#include <memory>\n\nint main() {\n  std::shared_ptr<int> p1(new int(5));  // 声明一个共享指针，并分配一个int类型的对象\n  std::cout << *p1 << std::endl;  // 输出指针指向的对象的值\n\n  std::shared_ptr<int> p2 = p1;  // 将一个共享指针赋值给另一个共享指针\n  std::cout << p1.use_count() << \" \" << p2.use_count() << std::endl;  // 输出两个指针的引用计数\n\n  return 0;\n}\n","language":"cpp","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"#include"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-b4b021"},"children":[{"type":"text","value":"<iostream>"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"#include"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-b4b021"},"children":[{"type":"text","value":"<memory>"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"main"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"() {"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::shared_ptr"}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<int>"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"p1"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"new"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-c3ecea"},"children":[{"type":"text","value":"5"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"));"}]},{"type":"element","tag":"span","props":{"class":"ct-ad4a3f"},"children":[{"type":"text","value":"  // 声明一个共享指针，并分配一个int类型的对象"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::cout "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<<"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"*"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"p1 "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<<"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::endl;"}]},{"type":"element","tag":"span","props":{"class":"ct-ad4a3f"},"children":[{"type":"text","value":"  // 输出指针指向的对象的值"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::shared_ptr"}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<int>"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" p2 "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" p1;"}]},{"type":"element","tag":"span","props":{"class":"ct-ad4a3f"},"children":[{"type":"text","value":"  // 将一个共享指针赋值给另一个共享指针"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::cout "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<<"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" p1."}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"use_count"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"() "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<<"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-b4b021"},"children":[{"type":"text","value":"\" \""}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<<"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" p2."}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"use_count"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"() "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<<"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::endl;"}]},{"type":"element","tag":"span","props":{"class":"ct-ad4a3f"},"children":[{"type":"text","value":"  // 输出两个指针的引用计数"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-c3ecea"},"children":[{"type":"text","value":"0"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在这个程序中，我们声明了两个"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::shared_ptr"}]},{"type":"text","value":"类型的指针p1和p2，并让它们指向同一个int类型的对象。我们可以通过调用指针的"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"use_count()"}]},{"type":"text","value":"方法来获取它的引用计数，表示当前有多少个指针指向这个内存。当程序执行完毕，如果所有的指针都被析构了，智能指针所管理的内存就会被自动释放，避免了内存泄漏。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"总之，智能指针是C++11中一个非常实用的类型，它可以自动管理内存的生命周期，减少程序员手动管理内存的工作量，并且可以避免常见的内存错误。"}]},{"type":"element","tag":"h3","props":{"id":"auto"},"children":[{"type":"text","value":"auto"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"自动类型推导"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当与"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"const"}]},{"type":"text","value":"结合使用时"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"当类型不为引用时，auto 的推导结果将不保留表达式的 const 属性；"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"当类型为引用时，auto 的推导结果将保留表达式的 const 属性。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"auto的限制"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用 auto 的时候必须对变量进行初始化"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"auto 不能在函数的参数中使用"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"这个很容易理解，我们在定义函数的时候只是对参数进行了声明，指明了参数的类型，但并没有给它赋值，只有在实际调用函数的时候才会给参数赋值；而\nauto 要求必须对变量进行初始化，所以这是矛盾的。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"auto 不能作用于类的非静态成员变量（也就是没有 static 关键字修饰的成员变量）中"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"可以用"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"decltype"}]},{"type":"text","value":"定义，如下就可以写成"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"decltype(T().begin()) m_it;"}]}]}]},{"type":"element","tag":"code","props":{"code":"template <typename T>\nclass A {\nprivate:\n    typename T::iterator m_it;\n}       \n","language":"cpp","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"template"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" <"}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"typename"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"T"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":">"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"class"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"A"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" {"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"private:"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"typename"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"T"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::"}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"iterator"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" m_it;"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"}       "}]}]}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"auto 关键字不能定义数组"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"auto 不能作用于模板参数"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"auto常用"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用 auto 定义迭代器"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"auto 用于泛型编程"}]}]},{"type":"element","tag":"h3","props":{"id":"using"},"children":[{"type":"text","value":"using"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"using"}]},{"type":"text","value":"定义别名（替代"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"typedef"}]},{"type":"text","value":"）"}]},{"type":"element","tag":"h3","props":{"id":"支持函数模板的默认模板参数"},"children":[{"type":"text","value":"支持函数模板的默认模板参数"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"函数模板是C++中一种常见的技术，它允许定义一个函数，接受任意类型的参数。例如，下面是一个简单的函数模板示例："}]},{"type":"element","tag":"code","props":{"code":"#include <iostream>\n\ntemplate<typename T>\nvoid print(T value) {\n  std::cout << value << std::endl;\n}\n\nint main() {\n  print(5);\n  print(\"hello world\");\n\n  return 0;\n}\n","language":"cpp","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"#include"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-b4b021"},"children":[{"type":"text","value":"<iostream>"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"template"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"typename"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"T"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":">"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"void"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"print"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"T"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"value"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":") {"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::cout "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<<"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" value "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<<"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::endl;"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"}"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"main"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"() {"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"print"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-c3ecea"},"children":[{"type":"text","value":"5"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":");"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"print"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-b4b021"},"children":[{"type":"text","value":"\"hello world\""}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":");"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-c3ecea"},"children":[{"type":"text","value":"0"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在这个程序中，我们定义了一个名为print的函数模板，它接受一个模板参数T，表示函数接受任意类型的参数。在函数体内，我们可以像使用普通类型一样使用这个模板参数T。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"C++11标准引入了一种新的语法，允许为函数模板定义默认模板参数。例如，下面是一个使用默认模板参数的函数模板示例："}]},{"type":"element","tag":"code","props":{"code":"#include <iostream>\n\ntemplate<typename T = int>\nvoid print(T value) {\n  std::cout << value << std::endl;\n}\n\nint main() {\n  print(5);\n  print(\"hello world\");\n\n  return 0;\n}\n","language":"cpp","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"#include"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-b4b021"},"children":[{"type":"text","value":"<iostream>"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"template"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"typename"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"T"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" int>"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"void"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"print"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"T"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"value"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":") {"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::cout "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<<"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" value "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"<<"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::endl;"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"}"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"main"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"() {"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"print"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-c3ecea"},"children":[{"type":"text","value":"5"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":");"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"print"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-b4b021"},"children":[{"type":"text","value":"\"hello world\""}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":");"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-c3ecea"},"children":[{"type":"text","value":"0"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在这个程序中，我们为函数模板print定义了一个默认模板参数T = int，表示如果调用函数时没有指定模板参数，就会使用默认的int类型作为模板参数。因此，在上面的程序中，调用函数print时，第一次调用会自动使用默认的模板参数int，并将实际参数5赋值给函数的形式参数value。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"默认模板参数的作用是简化函数模板的调用，减少程序员的工作量。例如，我们可以通过使用默认模板参数，定义一个通用的排序函数，支持任意类型的数组排序，并且不需要显式地指定模板参数："}]},{"type":"element","tag":"code","props":{"code":"#include <algorithm>\n\ntemplate<typename T>\nvoid sort(T* array, int size) {\n  std::sort(array, array + size);\n}\n\nint main() {\n  int array[] = {5, 3, 2, 4, 1};\n  sort(array, 5);\n\n  return 0;\n}\n","language":"cpp","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"#include"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-b4b021"},"children":[{"type":"text","value":"<algorithm>"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"template"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"typename"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"T"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":">"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"void"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"sort"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"T"}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"*"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"array"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"size"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":") {"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-e68728"},"children":[{"type":"text","value":"std"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"::"}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"sort"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"(array, array "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"+"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" size);"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"}"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"main"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"() {"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" array[] "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" {"}]},{"type":"element","tag":"span","props":{"class":"ct-c3ecea"},"children":[{"type":"text","value":"5"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-c3ecea"},"children":[{"type":"text","value":"3"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-c3ecea"},"children":[{"type":"text","value":"2"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-c3ecea"},"children":[{"type":"text","value":"4"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-c3ecea"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"};"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-5f3120"},"children":[{"type":"text","value":"sort"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"(array, "}]},{"type":"element","tag":"span","props":{"class":"ct-c3ecea"},"children":[{"type":"text","value":"5"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":");"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-bb75a9"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-c3ecea"},"children":[{"type":"text","value":"0"}]},{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bfffbd"},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在这个程序中，我们定义了一个名为sort的函数模板，它接受一个类型为T的数组和数组的长度作为参数。在函数体内，我们使用了C++标准库中的std::sort函数，将数组进行排序。因为我们没有为函数模板指定模板参数，所以编译器会自动推断出模板参数的类型，并使用默认的模板参数int进行编译。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"总之，支持函数模板的默认模板参数是C++11标准的一项重要特性，它可以简化函数模板的定义和调用，提高程序的可读性和可维护性。"}]},{"type":"element","tag":"h2","props":{"id":"from-stroustrup"},"children":[{"type":"text","value":"from stroustrup"}]},{"type":"element","tag":"h3","props":{"id":"c11-features"},"children":[{"type":"text","value":"C++11 features"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"C++11 feels like a new language -- stroustrup"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.stroustrup.com/hopl20main-p5-p-bfc9cd4--final.pdf","rel":["nofollow"]},"children":[{"type":"text","value":"page29"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"C++11 introduced a bewildering number of language features, including:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"memory model - an efficient low level-model of modern hardware as a foundation for concurrency"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"auto and decltype - avoiding redundant repetition of type names"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"range-for - simple linear traversal of ranges"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"move semantics and rvalue references - minimizing copying of data"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"uniform initialization - an (almost) completely general syntax and semantics for initializing objects of all kinds and\ntypes"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"nullptr - a name for the null pointer"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"constexpr functions - compile-time evaluated functions"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"user-defined literals - literals for user-defined types"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"raw string literals - literals where escape characters are not needed, mostly for regular expressions"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"attributes - associating essentially arbitrary information with a name"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"lambdas - unnamed function objects"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"variadic templates - templates that can handle an arbitrary number of arguments of arbitrary types"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"template aliases - the ability to rename a template and to bind some template arguments for the new name"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"noexcept - a way of ensuring that an exception isn’t thrown from a function"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"override and final - explicit syntax for managing large class hierarchies"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"static_assert - compile-time assertions"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"long long - a longer integer type"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"default member initializers - give a data member a default value that can be superseded by initialization in a\nconstructor"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"enum classes - strongly typed enumerations with scoped enumerators"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"And here is a list of the major standard-library components:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"unique_ptr and shared_ptr - resource-management pointers relying on RAII"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"memory model and atomic variables"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"thread, mutex, condition_variable, etc. - type-safe and portable support for basic system- level concurrency"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"future, promise, and packaged_task, etc. - slightly higher-level concurrency"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"tuple - unnamed simple composite types"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"type traits - testable properties of types for use in metaprogramming"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"regular expression matching"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"random numbers - with many generators (engines) and distributions"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Time - time_point and duration"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"unordered_map, etc. - hash tables"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"forward_list - a singly-linked list"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"array - a fixed-constant-sized array that knows its size"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"emplace operations - construct objects right within a container to avoid copying"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"exception_ptr - enables transfer of exceptions between threads"}]}]},{"type":"element","tag":"h3","props":{"id":"c17-features"},"children":[{"type":"text","value":"C++17 features"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"C++17 had about 21 new language features (depending on how you count), including:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Constructor template argument deduction - simplify object definitions"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Deduction guides - an explicit notation for resolving constructor template argument deduction ambiguities"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Structured bindings - simplify notation and eliminate a source of uninitialized variables"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"inline variables - simplify the use of statically allocated variables in header-only libraries"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Fold expressions - simplify some uses of variadic templates"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Explicit test in conditions - a bit like conditions in for-statements"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Guaranteed copy elision - eliminate many redundant copy operations"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Stricter expression evaluation order - prevents some subtle order-of-evaluation mistakes"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"auto as a template argument type - type deduction for value template arguments"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Standard attributes to catch common mistakes - [[maybe_unused]], [[nodiscard]], and [[fallthrough]]"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Hexadecimal floating-point literals"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Constant expression if - simplify compile-time evaluated code"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The C++17 standard-library added about 13 new features plus many minor modifications:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"optional, variant, and any - standard-library types for expressing alternatives"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"shared_mutex and shared_lock (reader-writer locks) and scoped_lock"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"parallel STL - multi-threaded and/or vectorized versions of standard-library algorithms"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"file system - the ability to portably manipulate file-system paths and directories"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"string_view - a non-owning reference to an immutable sequence of characters"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Mathematical special functions - including Laguerre and Legendre polynomials, beta func- tions, Riemann zeta function"}]}]},{"type":"element","tag":"style","children":[{"type":"text","value":".ct-ad4a3f{color:#6E7781}\n.ct-c3ecea{color:#0550AE}\n.ct-e68728{color:#953800}\n.ct-5f3120{color:#8250DF}\n.ct-b4b021{color:#0A3069}\n.ct-bfffbd{color:#24292F}\n.ct-bb75a9{color:#CF222E}\n.dark .ct-bb75a9{color:#FF7B72}\n.dark .ct-bfffbd{color:#C9D1D9}\n.dark .ct-b4b021{color:#A5D6FF}\n.dark .ct-5f3120{color:#D2A8FF}\n.dark .ct-e68728{color:#FFA657}\n.dark .ct-c3ecea{color:#79C0FF}\n.dark .ct-ad4a3f{color:#8B949E}"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"c-11-有什么新特性","depth":2,"text":"C++ 11 有什么新特性","children":[{"id":"线程库","depth":3,"text":"线程库"},{"id":"智能指针","depth":3,"text":"智能指针"},{"id":"auto","depth":3,"text":"auto"},{"id":"using","depth":3,"text":"using"},{"id":"支持函数模板的默认模板参数","depth":3,"text":"支持函数模板的默认模板参数"}]},{"id":"from-stroustrup","depth":2,"text":"from stroustrup","children":[{"id":"c11-features","depth":3,"text":"C++11 features"},{"id":"c17-features","depth":3,"text":"C++17 features"}]}]}},"_type":"markdown","_id":"content:1.cpp:feature.md","_source":"content","_file":"1.cpp/feature.md","_extension":"md"}