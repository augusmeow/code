{"_path":"/code/distributed/paxos","_dir":"distributed","_draft":false,"_partial":false,"_locale":"","_empty":false,"title":"PAXOS","description":"","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"paxos"},"children":[{"type":"text","value":"PAXOS"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"总结自"},{"type":"element","tag":"a","props":{"href":"https://blog.openacid.com/algo/paxos/","rel":["nofollow"]},"children":[{"type":"text","value":"paxos"}]}]}]},{"type":"element","tag":"h2","props":{"id":"前言"},"children":[{"type":"text","value":"前言"}]},{"type":"element","tag":"h3","props":{"id":"是什么"},"children":[{"type":"text","value":"是什么"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在分布式系统中保证多副本数据强一致的算法."}]},{"type":"element","tag":"h3","props":{"id":"有什么用"},"children":[{"type":"text","value":"有什么用"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"没有paxos的一堆机器, 叫做分布式;"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"有paxos协同的一堆机器, 叫分布式系统."}]}]},{"type":"element","tag":"h2","props":{"id":"分布式系统要解决的问题"},"children":[{"type":"text","value":"分布式系统要解决的问题"}]},{"type":"element","tag":"h3","props":{"id":"背景"},"children":[{"type":"text","value":"背景"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"多个节点一起完成一件事情。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n分布式中唯一的问题：对某事保持一致。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nPaxos：分布式系统的核心算法。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"paxos的工作, 就是把一堆运行的机器协同起来, 让多个机器成为一个整体系统. 在这个系统中, 每个机器都必须让系统中的状态达成一致,\n例如三副本集群如果一个机器上上传了一张图片, 那么另外2台机器上也必须复制这张图片过来, 整个系统才处于一个一致的状态."}]},{"type":"element","tag":"h3","props":{"id":"问题"},"children":[{"type":"text","value":"问题"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"分布式系统的一致性问题最终都归结为分布式存储的一致性. 像aws的对象存储可靠性要求是9~13个9. 而这么高的可靠性都是建立在可靠性没那么高的硬件上的."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"对系统的需求：持久性要达到 99.99999999%"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n我们可以用的基础设施："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"磁盘: 4%年损坏率"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"服务器宕机时间：0.1%或者更长"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"IDC间丢包率：5% ~ 30%"}]}]},{"type":"element","tag":"h3","props":{"id":"解决方案"},"children":[{"type":"text","value":"解决方案"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"几乎所有的分布式存储(甚至单机系统, 参考EC第一篇:"},{"type":"element","tag":"a","props":{"href":"https://blog.openacid.com/storage/ec-1","rel":["nofollow"]},"children":[{"type":"text","value":"原理"}]},{"type":"text","value":", EC第二篇:"},{"type":"element","tag":"a","props":{"href":"https://blog.openacid.com/storage/ec-2","rel":["nofollow"]},"children":[{"type":"text","value":"实现"}]},{"type":"text","value":", EC第三篇:"},{"type":"element","tag":"a","props":{"href":"https://blog.openacid.com/storage/ec-3","rel":["nofollow"]},"children":[{"type":"text","value":"极限"}]},{"type":"text","value":")\n都必须用某种冗余的方式在廉价硬件的基础上搭建高可靠的存储. 而冗余的基础就是多副本策略, 一份数据存多份. 多副本保证了可靠性,\n而副本之间的一致, 就需要paxos这类分布式一致性算法来保证."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"(可能的解决方案)"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n多副本：x<n个副本损坏不会丢失数据"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n多副本的数据丢失风险："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"1 副本：~ 0.63%"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"2 副本：~ 0.00395%"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"3 副本：< 0.000001%"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"n 副本：~ x^n //x单副本损坏率"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如何实施复制？"}]},{"type":"element","tag":"h2","props":{"id":"不太完美的复制策略"},"children":[{"type":"text","value":"不太完美的复制策略"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"复制算法"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"主从异步复制"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"主从同步复制"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"主从半同步复制"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"多数派写(读)"}]}]},{"type":"element","tag":"h3","props":{"id":"主从异步复制"},"children":[{"type":"text","value":"主从异步复制"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"主从异步复制"}]},{"type":"text","value":"是最简单的策略之一, 它很容易实现, 但存在一个问题: 客户端收到一个数据已经安全(OK)的信息, 跟数据真正安全(\n数据复制到全部的机器上)在时间上有一个空隙, 这段时间负责接收客户端请求的那个机器(master)如果被闪电击中或被陨石砸到或被打扫卫生的大姐踢断了电源,\n那数据就可能会丢失. 因此它不是一个可靠的复制策略(使用主从异步复制要求你必须相信宇宙中不存在闪电陨石和扫地大姐)."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如Mysql的binlog的复制"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"主接到写请求"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"主写入本磁盘"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"主应答ok"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"主复制数据到从库"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果磁盘在复制前损坏：数据丢失"}]},{"type":"element","tag":"code","props":{"code":"autonumber\nClient ->> Master: \nMaster ->> Client: \nNote over Master: Disk Failure\nMaster-->>Slave.1: \nSlave.1-->>Master: \nMaster-->>Slave.2: \nSlave.2-->>Master: \n","language":"sequence","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"autonumber\nClient ->> Master: \nMaster ->> Client: \nNote over Master: Disk Failure\nMaster-->>Slave.1: \nSlave.1-->>Master: \nMaster-->>Slave.2: \nSlave.2-->>Master: "}]}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"主从同步复制"},"children":[{"type":"text","value":"主从同步复制"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"跟主从异步复制相比, "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"主从同步复制"}]},{"type":"text","value":"提供了完整的可靠性: 直到数据真的安全的复制到全部的机器上之后, master才告知客户端数据已经安全."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"但主从同步复制有个致命的缺点就是整个系统中有任何一个机器宕机, 写入就进行不下去了. 相当于系统的可用性随着副本数量指数降低."}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"主接到写请求"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"主复制日志到从库"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"从库此时阻塞"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"客户端一直在等待ok，直到所有从库返回"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一个失联节点造成整个系统不可用。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"没有数据丢失"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"可用性降低"}]}]},{"type":"element","tag":"code","props":{"code":"autonumber\nClient ->> Master: \nMaster->>Slave.1: \nMaster->>Slave.2: \nSlave.1-->>Master: \nSlave.2-->>Master: BLOCK\nMaster -->> Client: \n","language":"sequence","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"autonumber\nClient ->> Master: \nMaster->>Slave.1: \nMaster->>Slave.2: \nSlave.1-->>Master: \nSlave.2-->>Master: BLOCK\nMaster -->> Client: "}]}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"半同步复制"},"children":[{"type":"text","value":"半同步复制"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在同步和异步之间, 做一个折中, 看起来是一个不错的方案. 这就是"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"半同步复制"}]},{"type":"text","value":". 它要求master在应答客户端之前必须把数据复制到足够多的机器上,\n但不需要是全部. 这样副本数够多可以提供比较高的可靠性; 1台机器宕机也不会让整个系统停止写入."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"但是它还是不完美, 例如数据a复制到slave-1, 但没有到达slave-2; 数据b复制达到了slave-2但没有到达slave-1,\n这时如果master挂掉了需要从某个slave恢复出数据, 任何一个slave都不能提供完整的数据. 所以在整个系统中, 数据存在某种不一致."}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"主接到写请求"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"主复制日志到从库"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"从库此时阻塞"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如果1<=x<=n个从库返回ok，则客户端ok"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"高可靠性"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"高可用性"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"可能任何从库都不完整"}]}]},{"type":"element","tag":"code","props":{"code":"autonumber\nClient ->> Master: \nMaster->>Slave.1: \nMaster->>Slave.2: \nSlave.1->>Master: \nMaster ->> Client: \nSlave.2-->>Master: \n","language":"sequence","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"autonumber\nClient ->> Master: \nMaster->>Slave.1: \nMaster->>Slave.2: \nSlave.1->>Master: \nMaster ->> Client: \nSlave.2-->>Master: "}]}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"多数派读写"},"children":[{"type":"text","value":"多数派读写"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"为了解决半同步复制中数据不一致的问题, 可以将这个复制策略再做一改进: "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"多数派读写"}]},{"type":"text","value":": 每条数据必须写入到半数以上的机器上.\n每次读取数据都必须检查半数以上的机器上是否有这条数据."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在这种策略下, 数据可靠性足够, 宕机容忍足够, 任一机器故障也能读到全部数据."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Dynamo/Cassandra"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"客户端写入$W>=\\frac{N}{2}+1$个节点"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"不需要主"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"$W + R > N ;R>=\\frac{N}{2}+1$"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"容忍最多$\\frac{N-1}{2}$个节点损坏"}]},{"type":"element","tag":"code","props":{"code":"autonumber\nClient ->> Node.1: \nClient ->> Node.2: \nClient ->> Node.3: \nNode.1->>Client: \nNode.2->>Client: \nNode.3-->>Client: \n","language":"sequence","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"autonumber\nClient ->> Node.1: \nClient ->> Node.2: \nClient ->> Node.3: \nNode.1->>Client: \nNode.2->>Client: \nNode.3-->>Client: "}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"多数派读写的策略也有个但是, 就是对于一条数据的更新时, 会产生不一致的状态. 例如:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"node-1, node-2都写入了a=x,\n下一次更新时node-2, node-3写入了a=y.\n这时, 一个要进行读取a的客户端如果联系到了node-1和node-2, 它将看到2条不同的数据."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"为了不产生歧义, 多数派读写还必须给每笔写入增加一个全局递增的时间戳. 更大时间戳的记录如果被看见, 就应该忽略小时间戳的记录.\n这样在读取过程中, 客户端就会看到a=x₁, a=y₂ 这2条数据, 通过比较时间戳1和2, 发现y是更新的数据, 所以忽略a=x₁.\n这样保证多次更新一条数据不产生歧义."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"后写入优胜"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"最后一次写入覆盖先前写入"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"所有写入操作需要一个全局顺序，时间戳"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"高可靠性"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"高可用性"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"数据完整性有保证"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"是的, 但是又来了. 这种带时间戳的多数派读写依然有问题. 就是在客户端没有完成一次完整的多数派写的时候: 例如, 上面的例子中写入,\na=x₁写入了node-1和node-2, a=y₂时只有node-3 写成功了, 然后客户端进程就挂掉了, 留下系统中的状态如下:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"node-1: a=x₁"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nnode-2: a=x₁"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nnode-3: a=y₂"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这时另一个读取的客户端来了,"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如果它联系到node-1和node-2, 那它得到的结果是a=x₁."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如果它联系到node-2和node-3, 那它得到的结果是a=y₂."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"整个系统对外部提供的信息仍然是不一致的."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"paxos中通过2次原本并不严谨的多数派读写, 实现了严谨的强一致consensus算法."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"W + R > N"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一致性："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"最终一致性"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"事务性："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"非原子更新"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"脏读"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"更新丢失问题"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Concurrency_control","rel":["nofollow"]},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Concurrency_control"}]}]},{"type":"element","tag":"h2","props":{"id":"从多数派读写到paxos的推导"},"children":[{"type":"text","value":"从多数派读写到paxos的推导"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一个假想存储服务"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"一个有3个存储节点的存储服务集群"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用多数派读写的策略"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"只存储一个变量"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"i"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"i"}]},{"type":"text","value":"的每次更新对应有多个版本："},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"i1"}]},{"type":"text","value":","},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"i2"}]},{"type":"text","value":","},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"i3"}]},{"type":"text","value":"..."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"这个存储系统支持3个命令"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"get"}]},{"type":"text","value":"：读最新的"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"i"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"set<n>"}]},{"type":"text","value":"：设置下个版本的"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"i"}]},{"type":"text","value":"的值为"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<n>"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"inc<n>"}]},{"type":"text","value":"：对"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"i"}]},{"type":"text","value":"加"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<n>"}]},{"type":"text","value":"，也生成1个新版本"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"命令实现"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"set"}]},{"type":"text","value":"：直接对应多数派写"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"inc"}]},{"type":"text","value":"：(最简单的事务型操作)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"image","src":"https://user-images.githubusercontent.com/34206897/180978809-4ba6957c-be2d-4b9d-a9d6-e2a12175c48e.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"问题: 如果有2个并发的客户端进程同时做这个inc的操作, 在多数派读写的实现中, 必然会产生一个Y客户端覆盖X客户端的问题.\n从而产生了数据更新点的丢失."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"而paxos就是为了解决这类问题提出的, 它需要让Y能检测到这种并发冲突, 进而采取措施避免更新丢失"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"1c9a7e01b88e4cdc9cf99061d5a78ed","src":"https://user-images.githubusercontent.com/34206897/180979165-328339f6-6d24-4b02-a114-012bab93dd7d.jpg"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"提取一下上面提到的问题: 让Y去更新的时候不能直接更新i₂, 而是应该能检测到i₂的存在, 进而将自己的结果保存在下一个版本i₃中,\n再写回系统中."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"而这个问题可以转化成: i的每个版本只能被写入一次, 不允许修改. 如果系统设计能满足这个要求, 那么X和Y的inc操作就都可以正确被执行了."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"于是我们的问题就转化成一个更简单, 更基础的问题: 如何确定一个值(例如iⱼ)已经被写入了."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"直观来看, 解决方法也很简单, 在X或Y写之前先做一次多数派读, 以便确认是否有其他客户端进程已经在写了, 如果有, 则放弃."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"前言","depth":2,"text":"前言","children":[{"id":"是什么","depth":3,"text":"是什么"},{"id":"有什么用","depth":3,"text":"有什么用"}]},{"id":"分布式系统要解决的问题","depth":2,"text":"分布式系统要解决的问题","children":[{"id":"背景","depth":3,"text":"背景"},{"id":"问题","depth":3,"text":"问题"},{"id":"解决方案","depth":3,"text":"解决方案"}]},{"id":"不太完美的复制策略","depth":2,"text":"不太完美的复制策略","children":[{"id":"主从异步复制","depth":3,"text":"主从异步复制"},{"id":"主从同步复制","depth":3,"text":"主从同步复制"},{"id":"半同步复制","depth":3,"text":"半同步复制"},{"id":"多数派读写","depth":3,"text":"多数派读写"}]},{"id":"从多数派读写到paxos的推导","depth":2,"text":"从多数派读写到paxos的推导"}]}},"_type":"markdown","_id":"content:3.code:distributed:paxos.md","_source":"content","_file":"3.code/distributed/paxos.md","_extension":"md"}