{"_path":"/notes/linux/gdb","_dir":"linux","_draft":false,"_partial":false,"_locale":"","_empty":false,"title":"gdb","description":"实例，refer","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"gdb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"实例，"},{"type":"element","tag":"a","props":{"href":"https://haoel.blog.csdn.net/article/details/2879","rel":["nofollow"]},"children":[{"type":"text","value":"refer"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"cc -g tst.c -o tst"}]}]},{"type":"element","tag":"code","props":{"code":"gdb tst  <---------- 启动GDB\nGNU gdb 5.1.1\nCopyright 2002 Free Software Foundation, Inc.\nGDB is free software, covered by the GNU General Public License, and you are\nwelcome to change it and/or distribute copies of it under certain conditions.\nType \"show copying\" to see the conditions.\nThere is absolutely no warranty for GDB.  Type \"show warranty\" for details.\nThis GDB was configured as \"i386-suse-linux\"...\n(gdb) l     <-------------------- l命令相当于list，从第一行开始例出原码。\n1        #include <stdio.h>\n2\n3        int func(int n)\n4        {\n5                int sum=0,i;\n6                for(i=0; i<n; i++)\n7                {\n8                        sum+=i;\n9                }\n10               return sum;\n(gdb)       <-------------------- 直接回车表示，重复上一次命令\n11       }\n12\n13\n14       main()\n15       {\n16               int i;\n17               long result = 0;\n18               for(i=1; i<=100; i++)\n19               {\n20                       result += i;    \n(gdb) break 16    <-------------------- 设置断点，在源程序第16行处。\nBreakpoint 1 at 0x8048496: file tst.c, line 16.\n(gdb) break func  <-------------------- 设置断点，在函数func()入口处。\nBreakpoint 2 at 0x8048456: file tst.c, line 5.\n(gdb) info break  <-------------------- 查看断点信息。\nNum Type           Disp Enb Address    What\n1   breakpoint     keep y   0x08048496 in main at tst.c:16\n2   breakpoint     keep y   0x08048456 in func at tst.c:5\n(gdb) r           <--------------------- 运行程序，run命令简写\nStarting program: /home/hchen/test/tst\n\nBreakpoint 1, main () at tst.c:17    <---------- 在断点处停住。\n17               long result = 0;\n(gdb) n          <--------------------- 单条语句执行，next命令简写。\n18               for(i=1; i<=100; i++)\n(gdb) n\n20                       result += i;\n(gdb) n\n18               for(i=1; i<=100; i++)\n(gdb) n\n20                       result += i;\n(gdb) c          <--------------------- 继续运行程序，continue命令简写。\nContinuing.\nresult[1-100] = 5050       <----------程序输出。\n\nBreakpoint 2, func (n=250) at tst.c:5\n5                int sum=0,i;\n(gdb) n\n6                for(i=1; i<=n; i++)\n(gdb) p i        <--------------------- 打印变量i的值，print命令简写。\n$1 = 134513808\n(gdb) n\n8                        sum+=i;\n(gdb) n\n6                for(i=1; i<=n; i++)\n(gdb) p sum\n$2 = 1\n(gdb) n\n8                        sum+=i;\n(gdb) p i\n$3 = 2\n(gdb) n\n6                for(i=1; i<=n; i++)\n(gdb) p sum\n$4 = 3\n(gdb) bt        <--------------------- 查看函数堆栈。\n#0  func (n=250) at tst.c:5\n#1  0x080484e4 in main () at tst.c:24\n#2  0x400409ed in __libc_start_main () from /lib/libc.so.6\n(gdb) finish    <--------------------- 退出函数。\nRun till exit from #0  func (n=250) at tst.c:5\n0x080484e4 in main () at tst.c:24\n24              printf(\"result[1-250] = %d /n\", func(250) );\nValue returned is $6 = 31375\n(gdb) c     <--------------------- 继续运行。\nContinuing.\nresult[1-250] = 31375    <----------程序输出。\n\nProgram exited with code 027. <--------程序退出，调试结束。\n(gdb) q     <--------------------- 退出gdb。\n","language":"shell","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"tst"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"----------"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"启动GDB"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"GNU"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"5.1.1"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Copyright"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"2002"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"Free"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"Software"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"Foundation,"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"Inc."}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"GDB"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"is"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"free"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"software,"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"covered"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"by"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"the"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"GNU"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"General"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"Public"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"License,"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"and"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"you"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"are"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"welcome"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"to"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"change"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"it"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"and/or"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"distribute"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"copies"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"of"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"it"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"under"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"certain"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"conditions."}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Type"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"\"show copying\""}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"to"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"see"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"the"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"conditions."}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"There"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"is"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"absolutely"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"no"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"warranty"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"for"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"GDB."}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"Type"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"\"show warranty\""}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"for"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"details."}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"This"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"GDB"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"was"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"configured"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"as"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"\"i386-suse-linux\"..."}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") l     "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"-------------------- l命令相当于list，从第一行开始例出原码。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"class":"ct-f54dad"},"children":[{"type":"text","value":"#include <stdio.h>"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"2"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"3"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"        int func("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"n"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":")"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"4"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"        {"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"5"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"                int sum"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"0"}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":",i"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"6"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"                for(i"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"0"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"; "}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"i<n"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"; "}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"i++"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":")"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"7"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"                {"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"8"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"                        sum"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"+="}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"i"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"9"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"                }"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"10"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"               "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" sum;"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":")       "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"-------------------- 直接回车表示，重复上一次命令"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"11"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"       }"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"12"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"13"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"14"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"       "}]},{"type":"element","tag":"span","props":{"class":"ct-268fcd"},"children":[{"type":"text","value":"main"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"()"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"15"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"       {"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"16"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"               int i;"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"17"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"               long result = "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"0"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"18"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"               for(i"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"; "}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"i<=100"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"; "}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"i++"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":")"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"19"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"               {"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"20"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"                       result += i;    "}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"break"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"16"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"--------------------"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"设置断点，在源程序第16行处。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Breakpoint"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"at"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"0x"}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"8048496"}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"file"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"tst.c,"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"line"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"16."}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") break func  "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"-------------------- "}]},{"type":"element","tag":"span","props":{"class":"ct-268fcd"},"children":[{"type":"text","value":"设置断点，在函数func"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"()入口处。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Breakpoint"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"2"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"at"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"0x"}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"8048456"}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"file"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"tst.c,"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"line"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"5."}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") info break  "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"-------------------- 查看断点信息。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Num"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"Type"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"           "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"Disp"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"Enb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"Address"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"What"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"   breakpoint     keep y   "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"0x"}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"08048496"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"in"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" main at tst.c:"}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"16"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"2"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"   breakpoint     keep y   "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"0x"}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"08048456"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"in"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" func at tst.c:"}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"5"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") r           "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"--------------------- 运行程序，run命令简写"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Starting"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"program:"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"/home/hchen/test/tst"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Breakpoint"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":","}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"main"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" () "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"at"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"tst.c:"}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"17"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"----------"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"在断点处停住。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"17"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"               long result = "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"0"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") n          "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"--------------------- 单条语句执行，next命令简写。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"18"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"               for(i"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"; "}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"i<=100"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"; "}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"i++"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":")"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") n"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"20"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"                       result += i;"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") n"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"18"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"               for(i"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"; "}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"i<=100"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"; "}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"i++"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":")"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") n"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"20"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"                       result += i;"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") c          "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"--------------------- 继续运行程序，continue命令简写。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Continuing."}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"result[1-100"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"] = "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"5050"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"       "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"----------程序输出。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Breakpoint"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"2"}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":","}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"func"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" (n"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"250"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") at tst.c:"}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"5"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"5"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"                int sum"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"0"}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":",i"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") n"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"6"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"                for(i"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"; "}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"i<=n"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"; "}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"i++"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":")"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") p i        "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"--------------------- 打印变量i的值，print命令简写。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"$1"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" = "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"134513808"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") n"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"8"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"                        sum"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"+="}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"i"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") n"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"6"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"                for(i"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"; "}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"i<=n"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"; "}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"i++"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":")"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") p sum"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"$2"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" = "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"1"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") n"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"8"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"                        sum"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"+="}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"i"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") p i"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"$3"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" = "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"2"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") n"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"6"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"                for(i"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"1"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"; "}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"i<=n"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"; "}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"i++"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":")"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") p sum"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"$4"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" = "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"3"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") bt        "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"--------------------- 查看函数堆栈。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-f54dad"},"children":[{"type":"text","value":"#0  func (n=250) at tst.c:5"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-f54dad"},"children":[{"type":"text","value":"#1  0x080484e4 in main () at tst.c:24"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-f54dad"},"children":[{"type":"text","value":"#2  0x400409ed in __libc_start_main () from /lib/libc.so.6"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") finish    "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"--------------------- 退出函数。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Run"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"till"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"exit"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"from"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-f54dad"},"children":[{"type":"text","value":"#0  func (n=250) at tst.c:5"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"0x"}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"080484e4"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"in"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-268fcd"},"children":[{"type":"text","value":"main"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" () at tst.c:"}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"24"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"24"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"              printf("}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"\"result[1-250] = %d /n\""}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":", func("}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"250"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") );"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Value"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"returned"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"is"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"$6"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"31375"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") c     "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"--------------------- 继续运行。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Continuing."}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"result[1-250"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"] = "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"31375"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"----------程序输出。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Program"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"exited"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"with"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"code"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"027."}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"--------程序退出，调试结束。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") q     "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"--------------------- 退出gdb。"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"use"},"children":[{"type":"text","value":"use"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一般来说GDB主要调试的是C/C++的程序。要调试C/C++的程序，首先在编译时，我们必须要把调试信息加到可执行文件中。使用编译器（cc/gcc/g++）的 -g 参数可以做到这一点。如："}]},{"type":"element","tag":"code","props":{"code":"> cc -g hello.c -o hello\n> g++ -g hello.cpp -o hello\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"> cc -g hello.c -o hello\n> g++ -g hello.cpp -o hello"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果没有-g，你将看不见程序的函数名、变量名，所代替的全是运行时的内存地址。当你用-g把调试信息加入之后，并成功编译目标代码以后，让我们来看看如何用gdb来调试他。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"启动GDB的方法有以下几种："}]},{"type":"element","tag":"code","props":{"code":"1、gdb <program> \n   program也就是你的执行文件，一般在当然目录下。\n\n2、gdb <program> core\n   用gdb同时调试一个运行程序和core文件，core是程序非法执行后core dump后产生的文件。\n\n3、gdb <program> <PID>\n   如果你的程序是一个服务程序，那么你可以指定这个服务程序运行时的进程ID。gdb会自动attach上去，并调试他。program应该在PATH环境变量中搜索得到。\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"1、gdb <program> \n   program也就是你的执行文件，一般在当然目录下。\n\n2、gdb <program> core\n   用gdb同时调试一个运行程序和core文件，core是程序非法执行后core dump后产生的文件。\n\n3、gdb <program> <PID>\n   如果你的程序是一个服务程序，那么你可以指定这个服务程序运行时的进程ID。gdb会自动attach上去，并调试他。program应该在PATH环境变量中搜索得到。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GDB启动时，可以加上一些GDB的启动开关，详细的开关可以用gdb -help查看。我在下面只例举一些比较常用的参数："}]},{"type":"element","tag":"code","props":{"code":"-symbols <file> \n-s <file> \n从指定文件中读取符号表。\n\n-se file \n从指定文件中读取符号表信息，并把他用在可执行文件中。\n\n-core <file>\n-c <file> \n调试时core dump的core文件。\n\n-directory <directory>\n-d <directory>\n加入一个源文件的搜索路径。默认搜索路径是环境变量中PATH所定义的路径。\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"-symbols <file> \n-s <file> \n从指定文件中读取符号表。\n\n-se file \n从指定文件中读取符号表信息，并把他用在可执行文件中。\n\n-core <file>\n-c <file> \n调试时core dump的core文件。\n\n-directory <directory>\n-d <directory>\n加入一个源文件的搜索路径。默认搜索路径是环境变量中PATH所定义的路径。"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"gdb的命令概貌"},"children":[{"type":"text","value":"GDB的命令概貌"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/haoel/article/details/2880","rel":["nofollow"]},"children":[{"type":"text","value":"refer"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"启动gdb后，就你被带入gdb的调试环境中，就可以使用gdb的命令开始调试程序了，gdb的命令可以使用help命令来查看，如下所示："}]},{"type":"element","tag":"code","props":{"code":"(gdb) help\nList of classes of commands:\n\naliases -- Aliases of other commands\nbreakpoints -- Making program stop at certain points\ndata -- Examining data\nfiles -- Specifying and examining files\ninternals -- Maintenance commands\nobscure -- Obscure features\nrunning -- Running the program\nstack -- Examining the stack\nstatus -- Status inquiries\nsupport -- Support facilities\ntracepoints -- Tracing of program execution without stopping the program\nuser-defined -- User-defined commands\n\nType \"help\" followed by a class name for a list of commands in that class.\nType \"help\" followed by command name for full documentation.\nCommand name abbreviations are allowed if unambiguous.\n(gdb)\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"(gdb) help\nList of classes of commands:\n\naliases -- Aliases of other commands\nbreakpoints -- Making program stop at certain points\ndata -- Examining data\nfiles -- Specifying and examining files\ninternals -- Maintenance commands\nobscure -- Obscure features\nrunning -- Running the program\nstack -- Examining the stack\nstatus -- Status inquiries\nsupport -- Support facilities\ntracepoints -- Tracing of program execution without stopping the program\nuser-defined -- User-defined commands\n\nType \"help\" followed by a class name for a list of commands in that class.\nType \"help\" followed by command name for full documentation.\nCommand name abbreviations are allowed if unambiguous.\n(gdb)"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"gdb的命令很多，gdb把之分成许多个种类。help命令只是例出gdb的命令种类，如果要看种类中的命令，可以使用help "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<class>"}]},{"type":"text","value":" 命令，如：help breakpoints，查看设置断点的所有命令。也可以直接help "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<command>"}]},{"type":"text","value":"来查看命令的帮助。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"gdb中，输入命令时，可以不用打全命令，只用打命令的前几个字符就可以了，当然，命令的前几个字符应该要标志着一个唯一的命令，在Linux下，你可以敲击两次TAB键来补齐命令的全称，如果有重复的，那么gdb会把其例出来。"}]},{"type":"element","tag":"code","props":{"code":"示例一：在进入函数func时，设置一个断点。可以敲入break func，或是直接就是b func\n(gdb) b func\nBreakpoint 1 at 0x8048458: file hello.c, line 10.\n\n示例二：敲入b按两次TAB键，你会看到所有b打头的命令：\n(gdb) b\nbacktrace  break      bt\n(gdb)\n\n示例三：只记得函数的前缀，可以这样：\n(gdb) b make_ <按TAB键>\n（再按下一次TAB键，你会看到:）\nmake_a_section_from_file     make_environ\nmake_abs_section             make_function_type\nmake_blockvector             make_pointer_type\nmake_cleanup                 make_reference_type\nmake_command                 make_symbol_completion_list\n(gdb) b make_\nGDB把所有make开头的函数全部例出来给你查看。\n\n示例四：调试C++的程序时，有可以函数名一样。如：\n(gdb) b 'bubble( M-? \nbubble(double,double)    bubble(int,int)\n(gdb) b 'bubble(\n你可以查看到C++中的所有的重载函数及参数。（注：M-?和“按两次TAB键”是一个意思）\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"示例一：在进入函数func时，设置一个断点。可以敲入break func，或是直接就是b func\n(gdb) b func\nBreakpoint 1 at 0x8048458: file hello.c, line 10.\n\n示例二：敲入b按两次TAB键，你会看到所有b打头的命令：\n(gdb) b\nbacktrace  break      bt\n(gdb)\n\n示例三：只记得函数的前缀，可以这样：\n(gdb) b make_ <按TAB键>\n（再按下一次TAB键，你会看到:）\nmake_a_section_from_file     make_environ\nmake_abs_section             make_function_type\nmake_blockvector             make_pointer_type\nmake_cleanup                 make_reference_type\nmake_command                 make_symbol_completion_list\n(gdb) b make_\nGDB把所有make开头的函数全部例出来给你查看。\n\n示例四：调试C++的程序时，有可以函数名一样。如：\n(gdb) b 'bubble( M-? \nbubble(double,double)    bubble(int,int)\n(gdb) b 'bubble(\n你可以查看到C++中的所有的重载函数及参数。（注：M-?和“按两次TAB键”是一个意思）"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"要退出gdb时，只用发quit或命令简称q就行了。"}]},{"type":"element","tag":"h2","props":{"id":"run"},"children":[{"type":"text","value":"run"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gdb --args exe args1 args2"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"(gdb) "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"run"}]},{"type":"text","value":" or "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"r"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"l"}]},{"type":"text","value":" + method, find method"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"b"}]},{"type":"text","value":" + line, breakpoint"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" 下一步"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"s"}]},{"type":"text","value":" 步入"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"c"}]},{"type":"text","value":" continue"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"设置源码路径 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"set substitute-path source now_pos"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#layout"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"layout split"}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"layout"},"children":[{"type":"text","value":"layout"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"layout：用于分割窗口，可以一边查看代码，一边测试。主要有以下几种用法："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"layout src"}]},{"type":"text","value":"：显示源代码窗口"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"layout asm"}]},{"type":"text","value":"：显示汇编窗口"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"layout regs"}]},{"type":"text","value":"：显示源代码/汇编和寄存器窗口"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"layout split"}]},{"type":"text","value":"：显示源代码和汇编窗口"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"layout next"}]},{"type":"text","value":"：显示下一个layout"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"layout prev"}]},{"type":"text","value":"：显示上一个layout"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Ctrl + L"}]},{"type":"text","value":"：刷新窗口"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Ctrl + x"}]},{"type":"text","value":"，再按1：单窗口模式，显示一个窗口"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Ctrl + x"}]},{"type":"text","value":"，再按2：双窗口模式，显示两个窗口"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Ctrl + x"}]},{"type":"text","value":"，再按a：回到传统模式，即退出layout，回到执行layout之前的调试窗口。"}]}]},{"type":"element","tag":"h3","props":{"id":"gdb中运行unix的shell程序"},"children":[{"type":"text","value":"GDB中运行UNIX的shell程序"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在gdb环境中，你可以执行UNIX的shell的命令，使用gdb的shell命令来完成："}]},{"type":"element","tag":"code","props":{"code":"shell <command string>\n调用UNIX的shell来执行<command string>，环境变量SHELL中定义的UNIX的shell将会被用来执行<command string>，如果SHELL没有定义，那就使用UNIX的标准shell：/bin/sh。（在Windows中使用Command.com或cmd.exe）\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"shell <command string>\n调用UNIX的shell来执行<command string>，环境变量SHELL中定义的UNIX的shell将会被用来执行<command string>，如果SHELL没有定义，那就使用UNIX的标准shell：/bin/sh。（在Windows中使用Command.com或cmd.exe）"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"还有一个gdb命令是make：\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"make <make-args>"}]},{"type":"text","value":"\n可以在gdb中执行make命令来重新build自己的程序。这个命令等价于"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"shell make <make-args>"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"h3","props":{"id":"在gdb中运行程序"},"children":[{"type":"text","value":"在GDB中运行程序"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当以"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gdb <program>"}]},{"type":"text","value":"方式启动gdb后，gdb会在PATH路径和当前目录中搜索"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<program>"}]},{"type":"text","value":"的源文件。如要确认gdb是否读到源文件，可使用l或list命令，看看gdb是否能列出源代码。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在gdb中，运行程序使用r或是run命令。程序的运行，你有可能需要设置下面四方面的事。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"1、程序运行参数。\nset args 可指定运行时参数。（如：set args 10 20 30 40 50）\nshow args 命令可以查看设置好的运行参数。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"2、运行环境。\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"path <dir>"}]},{"type":"text","value":"可设定程序的运行路径。\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"show paths"}]},{"type":"text","value":" 查看程序的运行路径。\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"set environment varname [=value]"}]},{"type":"text","value":" 设置环境变量。如：set env USER=hchen\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"show environment [varname]"}]},{"type":"text","value":" 查看环境变量。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"3、工作目录。\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"cd <dir>"}]},{"type":"text","value":" 相当于shell的cd命令。\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"pwd"}]},{"type":"text","value":" 显示当前的所在目录。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"4、程序的输入输出。\ninfo terminal 显示你程序用到的终端的模式。\n使用重定向控制程序输出。如：run > outfile\ntty命令可以指写输入输出的终端设备。如：tty /dev/ttyb"}]},{"type":"element","tag":"h3","props":{"id":"调试已运行的程序"},"children":[{"type":"text","value":"调试已运行的程序"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"两种方法：\n1、在UNIX下用ps查看正在运行的程序的PID（进程ID），然后用"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gdb <program> PID"}]},{"type":"text","value":"格式挂接正在运行的程序。\n2、先用"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gdb <program>"}]},{"type":"text","value":"关联上源代码，并进行gdb，在gdb中用attach命令来挂接进程的PID。并用detach来取消挂接的进程。"}]},{"type":"element","tag":"h3","props":{"id":"暂停-恢复程序运行"},"children":[{"type":"text","value":"暂停 / 恢复程序运行"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"调试程序中，暂停程序运行是必须的，GDB可以方便地暂停程序的运行。你可以设置程序的在哪行停住，在什么条件下停住，在收到什么信号时停往等等。以便于你查看运行时的变量，以及运行时的流程。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当进程被gdb停住时，你可以使用info program 来查看程序的是否在运行，进程号，被暂停的原因。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在gdb中，我们可以有以下几种暂停方式：断点（BreakPoint）、观察点（WatchPoint）、捕捉点（CatchPoint）、信号（Signals）、线程停止（Thread Stops）。如果要恢复程序运行，可以使用c或是continue命令。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一、设置断点（BreakPoint）"}]},{"type":"element","tag":"code","props":{"code":"我们用break命令来设置断点。正面有几点设置断点的方法：\n\nbreak <function> \n    在进入指定函数时停住。C++中可以使用class::function或function(type,type)格式来指定函数名。\n\nbreak <linenum>\n    在指定行号停住。\n\nbreak +offset \nbreak -offset \n    在当前行号的前面或后面的offset行停住。offiset为自然数。\n\nbreak filename:linenum \n    在源文件filename的linenum行处停住。\n\nbreak filename:function \n    在源文件filename的function函数的入口处停住。\n\nbreak *address\n    在程序运行的内存地址处停住。\n\nbreak \n    break命令没有参数时，表示在下一条指令处停住。\n\nbreak ... if <condition>\n    ...可以是上述的参数，condition表示条件，在条件成立时停住。比如在循环境体中，可以设置break if i=100，表示当i为100时停住程序。\n\n查看断点时，可使用info命令，如下所示：（注：n表示断点号）\ninfo breakpoints [n] \ninfo break [n] \n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"我们用break命令来设置断点。正面有几点设置断点的方法：\n\nbreak <function> \n    在进入指定函数时停住。C++中可以使用class::function或function(type,type)格式来指定函数名。\n\nbreak <linenum>\n    在指定行号停住。\n\nbreak +offset \nbreak -offset \n    在当前行号的前面或后面的offset行停住。offiset为自然数。\n\nbreak filename:linenum \n    在源文件filename的linenum行处停住。\n\nbreak filename:function \n    在源文件filename的function函数的入口处停住。\n\nbreak *address\n    在程序运行的内存地址处停住。\n\nbreak \n    break命令没有参数时，表示在下一条指令处停住。\n\nbreak ... if <condition>\n    ...可以是上述的参数，condition表示条件，在条件成立时停住。比如在循环境体中，可以设置break if i=100，表示当i为100时停住程序。\n\n查看断点时，可使用info命令，如下所示：（注：n表示断点号）\ninfo breakpoints [n] \ninfo break [n] "}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"二、设置观察点（WatchPoint）"}]},{"type":"element","tag":"code","props":{"code":"观察点一般来观察某个表达式（变量也是一种表达式）的值是否有变化了，如果有变化，马上停住程序。我们有下面的几种方法来设置观察点：\n\nwatch <expr>\n    为表达式（变量）expr设置一个观察点。一量表达式值有变化时，马上停住程序。\n    \nrwatch <expr>\n    当表达式（变量）expr被读时，停住程序。\n    \nawatch <expr>\n    当表达式（变量）的值被读或被写时，停住程序。\n\ninfo watchpoints\n    列出当前所设置了的所有观察点。\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"观察点一般来观察某个表达式（变量也是一种表达式）的值是否有变化了，如果有变化，马上停住程序。我们有下面的几种方法来设置观察点：\n\nwatch <expr>\n    为表达式（变量）expr设置一个观察点。一量表达式值有变化时，马上停住程序。\n    \nrwatch <expr>\n    当表达式（变量）expr被读时，停住程序。\n    \nawatch <expr>\n    当表达式（变量）的值被读或被写时，停住程序。\n\ninfo watchpoints\n    列出当前所设置了的所有观察点。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"三、设置捕捉点（CatchPoint）"}]},{"type":"element","tag":"code","props":{"code":"你可设置捕捉点来补捉程序运行时的一些事件。如：载入共享库（动态链接库）或是C++的异常。设置捕捉点的格式为：\n\ncatch <event>\n    当event发生时，停住程序。event可以是下面的内容：\n    1、throw 一个C++抛出的异常。（throw为关键字）\n    2、catch 一个C++捕捉到的异常。（catch为关键字）\n    3、exec 调用系统调用exec时。（exec为关键字，目前此功能只在HP-UX下有用）\n    4、fork 调用系统调用fork时。（fork为关键字，目前此功能只在HP-UX下有用）\n    5、vfork 调用系统调用vfork时。（vfork为关键字，目前此功能只在HP-UX下有用）\n    6、load 或 load <libname> 载入共享库（动态链接库）时。（load为关键字，目前此功能只在HP-UX下有用）\n    7、unload 或 unload <libname> 卸载共享库（动态链接库）时。（unload为关键字，目前此功能只在HP-UX下有用）\n\ntcatch <event> \n    只设置一次捕捉点，当程序停住以后，应点被自动删除。\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"你可设置捕捉点来补捉程序运行时的一些事件。如：载入共享库（动态链接库）或是C++的异常。设置捕捉点的格式为：\n\ncatch <event>\n    当event发生时，停住程序。event可以是下面的内容：\n    1、throw 一个C++抛出的异常。（throw为关键字）\n    2、catch 一个C++捕捉到的异常。（catch为关键字）\n    3、exec 调用系统调用exec时。（exec为关键字，目前此功能只在HP-UX下有用）\n    4、fork 调用系统调用fork时。（fork为关键字，目前此功能只在HP-UX下有用）\n    5、vfork 调用系统调用vfork时。（vfork为关键字，目前此功能只在HP-UX下有用）\n    6、load 或 load <libname> 载入共享库（动态链接库）时。（load为关键字，目前此功能只在HP-UX下有用）\n    7、unload 或 unload <libname> 卸载共享库（动态链接库）时。（unload为关键字，目前此功能只在HP-UX下有用）\n\ntcatch <event> \n    只设置一次捕捉点，当程序停住以后，应点被自动删除。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"四、维护停止点 "},{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/haoel/article/details/2881","rel":["nofollow"]},"children":[{"type":"text","value":"refer"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"上面说了如何设置程序的停止点，GDB中的停止点也就是上述的三类。在GDB中，如果你觉得已定义好的停止点没有用了，你可以使用delete、clear、disable、enable这几个命令来进行维护。"}]},{"type":"element","tag":"code","props":{"code":"clear\n    清除所有的已定义的停止点。\n\nclear <function>\nclear <filename:function>\n    清除所有设置在函数上的停止点。\n\nclear <linenum>\nclear <filename:linenum>\n    清除所有设置在指定行上的停止点。\n\ndelete [breakpoints] [range...]\n    删除指定的断点，breakpoints为断点号。如果不指定断点号，则表示删除所有的断点。range 表示断点号的范围（如：3-7）。其简写命令为d。\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"clear\n    清除所有的已定义的停止点。\n\nclear <function>\nclear <filename:function>\n    清除所有设置在函数上的停止点。\n\nclear <linenum>\nclear <filename:linenum>\n    清除所有设置在指定行上的停止点。\n\ndelete [breakpoints] [range...]\n    删除指定的断点，breakpoints为断点号。如果不指定断点号，则表示删除所有的断点。range 表示断点号的范围（如：3-7）。其简写命令为d。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"比删除更好的一种方法是disable停止点，disable了的停止点，GDB不会删除，当你还需要时，enable即可，就好像回收站一样。"}]},{"type":"element","tag":"code","props":{"code":"disable [breakpoints] [range...]\n    disable所指定的停止点，breakpoints为停止点号。如果什么都不指定，表示disable所有的停止点。简写命令是dis.\n\nenable [breakpoints] [range...]\n    enable所指定的停止点，breakpoints为停止点号。\n\nenable [breakpoints] once range...\n    enable所指定的停止点一次，当程序停止后，该停止点马上被GDB自动disable。\n\nenable [breakpoints] delete range...\n    enable所指定的停止点一次，当程序停止后，该停止点马上被GDB自动删除。\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"disable [breakpoints] [range...]\n    disable所指定的停止点，breakpoints为停止点号。如果什么都不指定，表示disable所有的停止点。简写命令是dis.\n\nenable [breakpoints] [range...]\n    enable所指定的停止点，breakpoints为停止点号。\n\nenable [breakpoints] once range...\n    enable所指定的停止点一次，当程序停止后，该停止点马上被GDB自动disable。\n\nenable [breakpoints] delete range...\n    enable所指定的停止点一次，当程序停止后，该停止点马上被GDB自动删除。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"五、停止条件维护"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"前面在说到设置断点时，我们提到过可以设置一个条件，当条件成立时，程序自动停止，这是一个非常强大的功能，这里，我想专门说说这个条件的相关维护命令。一般来说，为断点设置一个条件，我们使用if关键词，后面跟其断点条件。并且，条件设置好后，我们可以用condition命令来修改断点的条件。（只有break和watch命令支持if，catch目前暂不支持if）"}]},{"type":"element","tag":"code","props":{"code":"condition <bnum> <expression>\n    修改断点号为bnum的停止条件为expression。\n\ncondition <bnum>\n    清除断点号为bnum的停止条件。\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"condition <bnum> <expression>\n    修改断点号为bnum的停止条件为expression。\n\ncondition <bnum>\n    清除断点号为bnum的停止条件。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"还有一个比较特殊的维护命令ignore，你可以指定程序运行时，忽略停止条件几次。"}]},{"type":"element","tag":"code","props":{"code":"ignore <bnum> <count>\n    表示忽略断点号为bnum的停止条件count次。\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"ignore <bnum> <count>\n    表示忽略断点号为bnum的停止条件count次。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"六、为停止点设定运行命令"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们可以使用GDB提供的command命令来设置停止点的运行命令。也就是说，当运行的程序在被停止住时，我们可以让其自动运行一些别的命令，这很有利行自动化调试。对基于GDB的自动化调试是一个强大的支持。"}]},{"type":"element","tag":"code","props":{"code":"commands [bnum]\n... command-list ...\nend\n\n为断点号bnum指写一个命令列表。当程序被该断点停住时，gdb会依次运行命令列表中的命令。\n\n例如：\n\n    break foo if x>0\n    commands\n    printf \"x is %d/n\",x\n    continue\n    end\n    断点设置在函数foo中，断点条件是x>0，如果程序被断住后，也就是，一旦x的值在foo函数中大于0，GDB会自动打印出x的值，并继续运行程序。\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"commands [bnum]\n... command-list ...\nend\n\n为断点号bnum指写一个命令列表。当程序被该断点停住时，gdb会依次运行命令列表中的命令。\n\n例如：\n\n    break foo if x>0\n    commands\n    printf \"x is %d/n\",x\n    continue\n    end\n    断点设置在函数foo中，断点条件是x>0，如果程序被断住后，也就是，一旦x的值在foo函数中大于0，GDB会自动打印出x的值，并继续运行程序。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果你要清除断点上的命令序列，那么只要简单的执行一下commands命令，并直接在打个end就行了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"七、断点菜单"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在C++中，可能会重复出现同一个名字的函数若干次（函数重载），在这种情况下，"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"break <function>"}]},{"type":"text","value":"不能告诉GDB要停在哪个函数的入口。当然，你可以使用"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"break <function(type)>"}]},{"type":"text","value":"也就是把函数的参数类型告诉GDB，以指定一个函数。否则的话，GDB会给你列出一个断点菜单供你选择你所需要的断点。你只要输入你菜单列表中的编号就可以了。如："}]},{"type":"element","tag":"code","props":{"code":"(gdb) b String::after\n[0] cancel\n[1] all\n[2] file:String.cc; line number:867\n[3] file:String.cc; line number:860\n[4] file:String.cc; line number:875\n[5] file:String.cc; line number:853\n[6] file:String.cc; line number:846\n[7] file:String.cc; line number:735\n> 2 4 6\nBreakpoint 1 at 0xb26c: file String.cc, line 867.\nBreakpoint 2 at 0xb344: file String.cc, line 875.\nBreakpoint 3 at 0xafcc: file String.cc, line 846.\nMultiple breakpoints were set.\nUse the \"delete\" command to delete unwanted\n breakpoints.\n(gdb)\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"(gdb) b String::after\n[0] cancel\n[1] all\n[2] file:String.cc; line number:867\n[3] file:String.cc; line number:860\n[4] file:String.cc; line number:875\n[5] file:String.cc; line number:853\n[6] file:String.cc; line number:846\n[7] file:String.cc; line number:735\n> 2 4 6\nBreakpoint 1 at 0xb26c: file String.cc, line 867.\nBreakpoint 2 at 0xb344: file String.cc, line 875.\nBreakpoint 3 at 0xafcc: file String.cc, line 846.\nMultiple breakpoints were set.\nUse the \"delete\" command to delete unwanted\n breakpoints.\n(gdb)"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"可见，GDB列出了所有after的重载函数，你可以选一下列表编号就行了。0表示放弃设置断点，1表示所有函数都设置断点。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"八、恢复程序运行和单步调试"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当程序被停住了，你可以用continue命令恢复程序的运行直到程序结束，或下一个断点到来。也可以使用step或next命令单步跟踪程序。"}]},{"type":"element","tag":"code","props":{"code":"continue [ignore-count]\nc [ignore-count]\nfg [ignore-count]\n    恢复程序运行，直到程序结束，或是下一个断点到来。ignore-count表示忽略其后的断点次数。continue，c，fg三个命令都是一样的意思。\n\n\nstep <count>\n    单步跟踪，如果有函数调用，他会进入该函数。进入函数的前提是，此函数被编译有debug信息。很像VC等工具中的step in。后面可以加count也可以不加，不加表示一条条地执行，加表示执行后面的count条指令，然后再停住。\n\nnext <count>\n    同样单步跟踪，如果有函数调用，他不会进入该函数。很像VC等工具中的step over。后面可以加count也可以不加，不加表示一条条地执行，加表示执行后面的count条指令，然后再停住。\n\nset step-mode\nset step-mode on\n    打开step-mode模式，于是，在进行单步跟踪时，程序不会因为没有debug信息而不停住。这个参数有很利于查看机器码。\n\nset step-mod off\n    关闭step-mode模式。\n\nfinish\n    运行程序，直到当前函数完成返回。并打印函数返回时的堆栈地址和返回值及参数值等信息。\n\nuntil 或 u\n    当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体。\n\nstepi 或 si\nnexti 或 ni\n    单步跟踪一条机器指令！一条程序代码有可能由数条机器指令完成，stepi和nexti可以单步执行机器指令。与之一样有相同功能的命令是“display/i $pc” ，当运行完这个命令后，单步跟踪会在打出程序代码的同时打出机器指令（也就是汇编代码）\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"continue [ignore-count]\nc [ignore-count]\nfg [ignore-count]\n    恢复程序运行，直到程序结束，或是下一个断点到来。ignore-count表示忽略其后的断点次数。continue，c，fg三个命令都是一样的意思。\n\n\nstep <count>\n    单步跟踪，如果有函数调用，他会进入该函数。进入函数的前提是，此函数被编译有debug信息。很像VC等工具中的step in。后面可以加count也可以不加，不加表示一条条地执行，加表示执行后面的count条指令，然后再停住。\n\nnext <count>\n    同样单步跟踪，如果有函数调用，他不会进入该函数。很像VC等工具中的step over。后面可以加count也可以不加，不加表示一条条地执行，加表示执行后面的count条指令，然后再停住。\n\nset step-mode\nset step-mode on\n    打开step-mode模式，于是，在进行单步跟踪时，程序不会因为没有debug信息而不停住。这个参数有很利于查看机器码。\n\nset step-mod off\n    关闭step-mode模式。\n\nfinish\n    运行程序，直到当前函数完成返回。并打印函数返回时的堆栈地址和返回值及参数值等信息。\n\nuntil 或 u\n    当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体。\n\nstepi 或 si\nnexti 或 ni\n    单步跟踪一条机器指令！一条程序代码有可能由数条机器指令完成，stepi和nexti可以单步执行机器指令。与之一样有相同功能的命令是“display/i $pc” ，当运行完这个命令后，单步跟踪会在打出程序代码的同时打出机器指令（也就是汇编代码）"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"九、信号（Signals）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"信号是一种软中断，是一种处理异步事件的方法。一般来说，操作系统都支持许多信号。尤其是UNIX，比较重要应用程序一般都会处理信号。UNIX定义了许多信号，比如SIGINT表示中断字符信号，也就是Ctrl+C的信号，SIGBUS表示硬件故障的信号；SIGCHLD表示子进程状态改变信号；SIGKILL表示终止程序运行的信号，等等。信号量编程是UNIX下非常重要的一种技术。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GDB有能力在你调试程序的时候处理任何一种信号，你可以告诉GDB需要处理哪一种信号。你可以要求GDB收到你所指定的信号时，马上停住正在运行的程序，以供你进行调试。你可以用GDB的handle命令来完成这一功能。"}]},{"type":"element","tag":"code","props":{"code":"handle <signal> <keywords...>\n    在GDB中定义一个信号处理。信号<signal>可以以SIG开头或不以SIG开头，可以用定义一个要处理信号的范围（如：SIGIO-SIGKILL，表示处理从SIGIO信号到SIGKILL的信号，其中包括SIGIO，SIGIOT，SIGKILL三个信号），也可以使用关键字all来标明要处理所有的信号。一旦被调试的程序接收到信号，运行程序马上会被GDB停住，以供调试。其<keywords>可以是以下几种关键字的一个或多个。\n\n    nostop\n        当被调试的程序收到信号时，GDB不会停住程序的运行，但会打出消息告诉你收到这种信号。\n    stop\n        当被调试的程序收到信号时，GDB会停住你的程序。\n    print\n        当被调试的程序收到信号时，GDB会显示出一条信息。\n    noprint\n        当被调试的程序收到信号时，GDB不会告诉你收到信号的信息。\n    pass\n    noignore\n        当被调试的程序收到信号时，GDB不处理信号。这表示，GDB会把这个信号交给被调试程序会处理。\n    nopass\n    ignore\n        当被调试的程序收到信号时，GDB不会让被调试程序来处理这个信号。\n\n\ninfo signals\ninfo handle\n    查看有哪些信号在被GDB检测中。\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"handle <signal> <keywords...>\n    在GDB中定义一个信号处理。信号<signal>可以以SIG开头或不以SIG开头，可以用定义一个要处理信号的范围（如：SIGIO-SIGKILL，表示处理从SIGIO信号到SIGKILL的信号，其中包括SIGIO，SIGIOT，SIGKILL三个信号），也可以使用关键字all来标明要处理所有的信号。一旦被调试的程序接收到信号，运行程序马上会被GDB停住，以供调试。其<keywords>可以是以下几种关键字的一个或多个。\n\n    nostop\n        当被调试的程序收到信号时，GDB不会停住程序的运行，但会打出消息告诉你收到这种信号。\n    stop\n        当被调试的程序收到信号时，GDB会停住你的程序。\n    print\n        当被调试的程序收到信号时，GDB会显示出一条信息。\n    noprint\n        当被调试的程序收到信号时，GDB不会告诉你收到信号的信息。\n    pass\n    noignore\n        当被调试的程序收到信号时，GDB不处理信号。这表示，GDB会把这个信号交给被调试程序会处理。\n    nopass\n    ignore\n        当被调试的程序收到信号时，GDB不会让被调试程序来处理这个信号。\n\n\ninfo signals\ninfo handle\n    查看有哪些信号在被GDB检测中。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"十、线程（Thread Stops）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果你程序是多线程的话，你可以定义你的断点是否在所有的线程上，或是在某个特定的线程。GDB很容易帮你完成这一工作。"}]},{"type":"element","tag":"code","props":{"code":"break <linespec> thread <threadno>\nbreak <linespec> thread <threadno> if ...\n    linespec指定了断点设置在的源程序的行号。threadno指定了线程的ID，注意，这个ID是GDB分配的，你可以通过“info threads”命令来查看正在运行程序中的线程信息。如果你不指定thread <threadno>则表示你的断点设在所有线程上面。你还可以为某线程指定断点条件。如：\n\n    (gdb) break frik.c:13 thread 28 if bartab > lim\n\n当你的程序被GDB停住时，所有的运行线程都会被停住。这方便你你查看运行程序的总体情况。而在你恢复程序运行时，所有的线程也会被恢复运行。那怕是主进程在被单步调试时。\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"break <linespec> thread <threadno>\nbreak <linespec> thread <threadno> if ...\n    linespec指定了断点设置在的源程序的行号。threadno指定了线程的ID，注意，这个ID是GDB分配的，你可以通过“info threads”命令来查看正在运行程序中的线程信息。如果你不指定thread <threadno>则表示你的断点设在所有线程上面。你还可以为某线程指定断点条件。如：\n\n    (gdb) break frik.c:13 thread 28 if bartab > lim\n\n当你的程序被GDB停住时，所有的运行线程都会被停住。这方便你你查看运行程序的总体情况。而在你恢复程序运行时，所有的线程也会被恢复运行。那怕是主进程在被单步调试时。"}]}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"查看栈信息-refer"},"children":[{"type":"text","value":"查看栈信息 "},{"type":"element","tag":"a","props":{"href":"https://haoel.blog.csdn.net/article/details/2882","rel":["nofollow"]},"children":[{"type":"text","value":"refer"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当程序被停住了，你需要做的第一件事就是查看程序是在哪里停住的。当你的程序调用了一个函数，函数的地址，函数参数，函数内的局部变量都会被压入“栈”（Stack）中。你可以用GDB命令来查看当前的栈中的信息。\n下面是一些查看函数调用栈信息的GDB命令："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"backtrace"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"bt"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"打印当前的函数调用栈的所有信息。如："}]},{"type":"element","tag":"code","props":{"code":"(gdb) bt\n#0 func (n=250) at tst.c:6\n#1 0x08048524 in main (argc=1, argv=0xbffff674) at tst.c:30\n#2 0x400409ed in __libc_start_main () from /lib/libc.so.6\n","language":"shell","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") bt"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-f54dad"},"children":[{"type":"text","value":"#0 func (n=250) at tst.c:6"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-f54dad"},"children":[{"type":"text","value":"#1 0x08048524 in main (argc=1, argv=0xbffff674) at tst.c:30"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-f54dad"},"children":[{"type":"text","value":"#2 0x400409ed in __libc_start_main () from /lib/libc.so.6"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"从上可以看出函数的调用栈信息："},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"__libc_start_main --> main()--> func()"}]}]},{"type":"element","tag":"code","props":{"code":"backtrace n\nbt n\n# n是一个正整数，表示只打印栈顶上n层的栈信息。\nbacktrace <-n>\nbt <-n>\n# -n表一个负整数，表示只打印栈底下n层的栈信息。\n","language":"shell","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"backtrace"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"n"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"bt"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"n"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-f54dad"},"children":[{"type":"text","value":"# n是一个正整数，表示只打印栈顶上n层的栈信息。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"backtrace"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"-"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"n"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":">"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"bt"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"-"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"n"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":">"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-f54dad"},"children":[{"type":"text","value":"# -n表一个负整数，表示只打印栈底下n层的栈信息。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果你要查看某一层的信息，你需要在切换当前的栈，一般来说，程序停止时，最顶层的栈就是当前栈，如果你要查看栈下面层的详细信息，首先要做的是切换当前栈。"}]},{"type":"element","tag":"code","props":{"code":"frame n\nf n\n# n是一个从0开始的整数，是栈中的层编号。比如：frame 0，表示栈顶，frame 1，表示栈的第二层。\nup\n# 表示向栈的上面移动n层，可以不打n，表示向上移动一层。\ndown\n# 表示向栈的下面移动n层，可以不打n，表示向下移动一层。\n","language":"shell","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"frame"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"n"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"f"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"n"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-f54dad"},"children":[{"type":"text","value":"# n是一个从0开始的整数，是栈中的层编号。比如：frame 0，表示栈顶，frame 1，表示栈的第二层。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"up"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-f54dad"},"children":[{"type":"text","value":"# 表示向栈的上面移动n层，可以不打n，表示向上移动一层。"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"down"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-f54dad"},"children":[{"type":"text","value":"# 表示向栈的下面移动n层，可以不打n，表示向下移动一层。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"上面的命令，都会打印出移动到的栈层的信息。如果你不想让其打出信息。你可以使用这三个命令："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"select-frame"}]},{"type":"text","value":" 对应于 frame 命令。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"up-silently"}]},{"type":"text","value":" 对应于 up 命令。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"down-silently"}]},{"type":"text","value":" 对应于 down 命令。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"查看当前栈层的信息，你可以用以下GDB命令："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"frame"}]},{"type":"text","value":" 或 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"f"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"会打印出这些信息：栈的层编号，当前的函数名，函数参数值，函数所在文件及行号，函数执行到的语句。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"info frame"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"info f"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这个命令会打印出更为详细的当前栈层的信息，只不过，大多数都是运行时的内存地址。比如：函数地址，调用函数的地址，被调用函数的地址，目前的函数是由什么样的程序语言写成的、函数参数地址及值、局部变量的地址等等。如："}]},{"type":"element","tag":"code","props":{"code":"(gdb) info f\nStack level 0, frame at 0xbffff5d4:\neip = 0x804845d in func (tst.c:6); saved eip 0x8048524\ncalled by frame at 0xbffff60c\nsource language c.\nArglist at 0xbffff5d4, args: n=250\nLocals at 0xbffff5d4, Previous frame's sp is 0x0\nSaved registers:\nebp at 0xbffff5d4, eip at 0xbffff5d8\n\n","language":"shell","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") info f"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Stack"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"level"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"0"}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":","}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"frame"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"at"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"0x"}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"bffff5d4"}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":":"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"eip"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"0x"}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"804845d"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"in"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"func"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" ("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"tst.c:6"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"); "}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"saved"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"eip"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"0x"}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"8048524"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"called"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"by"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"frame"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"at"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"0x"}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"bffff60c"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"source"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"language"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"c."}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Arglist"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"at"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"0x"}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"bffff5d4"}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":","}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"args:"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"n="}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"250"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Locals"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"at"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"0x"}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"bffff5d4"}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":","}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"Previous"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"frame's sp is 0x0"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"Saved registers:"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"ebp at 0xbffff5d4, eip at 0xbffff5d8"}]}]}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"info args"}]},{"type":"text","value":" 打印出当前函数的参数名及其值。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"info locals"}]},{"type":"text","value":" 打印出当前函数中所有局部变量及其值。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"info catch"}]},{"type":"text","value":" 打印出当前的函数中的异常处理信息。"}]}]},{"type":"element","tag":"h2","props":{"id":"查看源程序"},"children":[{"type":"text","value":"查看源程序"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一、显示源代码"}]},{"type":"element","tag":"code","props":{"code":"GDB 可以打印出所调试程序的源代码，当然，在程序编译时一定要加上-g的参数，把源程序信息编译到执行文件中。不然就看不到源程序了。当程序停下来以后，GDB会报告程序停在了那个文件的第几行上。你可以用list命令来打印程序的源代码。还是来看一看查看源代码的GDB命令吧。\n\nlist <linenum>\n    显示程序第linenum行的周围的源程序。\n\nlist <function> \n    显示函数名为function的函数的源程序。\n    \nlist \n    显示当前行后面的源程序。\n\nlist - \n    显示当前行前面的源程序。\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"GDB 可以打印出所调试程序的源代码，当然，在程序编译时一定要加上-g的参数，把源程序信息编译到执行文件中。不然就看不到源程序了。当程序停下来以后，GDB会报告程序停在了那个文件的第几行上。你可以用list命令来打印程序的源代码。还是来看一看查看源代码的GDB命令吧。\n\nlist <linenum>\n    显示程序第linenum行的周围的源程序。\n\nlist <function> \n    显示函数名为function的函数的源程序。\n    \nlist \n    显示当前行后面的源程序。\n\nlist - \n    显示当前行前面的源程序。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一般是打印当前行的上5行和下5行，如果显示函数是是上2行下8行，默认是10行，当然，你也可以定制显示的范围，使用下面命令可以设置一次显示源程序的行数。"}]},{"type":"element","tag":"code","props":{"code":"set listsize <count>\n    设置一次显示源代码的行数。\n    \nshow listsize\n    查看当前listsize的设置。\n   \n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"set listsize <count>\n    设置一次显示源代码的行数。\n    \nshow listsize\n    查看当前listsize的设置。\n   "}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"list命令还有下面的用法："}]},{"type":"element","tag":"code","props":{"code":"list <first>, <last>\n    显示从first行到last行之间的源代码。\n\nlist , <last>\n    显示从当前行到last行之间的源代码。\n    \nlist +\n    往后显示源代码。\n   \n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"list <first>, <last>\n    显示从first行到last行之间的源代码。\n\nlist , <last>\n    显示从当前行到last行之间的源代码。\n    \nlist +\n    往后显示源代码。\n   "}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一般来说在list后面可以跟以下这们的参数："}]},{"type":"element","tag":"code","props":{"code":"<linenum>   行号。\n<+offset>   当前行号的正偏移量。\n<-offset>   当前行号的负偏移量。\n<filename:linenum>  哪个文件的哪一行。\n<function>  函数名。\n<filename:function> 哪个文件中的哪个函数。\n<*address>  程序运行时的语句在内存中的地址。\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"<linenum>   行号。\n<+offset>   当前行号的正偏移量。\n<-offset>   当前行号的负偏移量。\n<filename:linenum>  哪个文件的哪一行。\n<function>  函数名。\n<filename:function> 哪个文件中的哪个函数。\n<*address>  程序运行时的语句在内存中的地址。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"二、搜索源代码"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"不仅如此，GDB还提供了源代码搜索的命令："}]},{"type":"element","tag":"code","props":{"code":"forward-search <regexp> \nsearch <regexp>\n    向前面搜索。\n\nreverse-search <regexp> \n    全部搜索。\n    \n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"forward-search <regexp> \nsearch <regexp>\n    向前面搜索。\n\nreverse-search <regexp> \n    全部搜索。\n    "}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"其中，"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<regexp>"}]},{"type":"text","value":"就是正则表达式，也主一个字符串的匹配模式，关于正则表达式，我就不在这里讲了，还请各位查看相关资料。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"三、指定源文件的路径"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"某些时候，用-g编译过后的执行程序中只是包括了源文件的名字，没有路径名。GDB提供了可以让你指定源文件的路径的命令，以便GDB进行搜索。"}]},{"type":"element","tag":"code","props":{"code":"directory <dirname ... >\ndir <dirname ... >\n    加一个源文件路径到当前路径的前面。如果你要指定多个路径，UNIX下你可以使用“:”，Windows下你可以使用“;”。\ndirectory \n    清除所有的自定义的源文件搜索路径信息。\n\nshow directories \n    显示定义了的源文件搜索路径。\n   \n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"directory <dirname ... >\ndir <dirname ... >\n    加一个源文件路径到当前路径的前面。如果你要指定多个路径，UNIX下你可以使用“:”，Windows下你可以使用“;”。\ndirectory \n    清除所有的自定义的源文件搜索路径信息。\n\nshow directories \n    显示定义了的源文件搜索路径。\n   "}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"四、源代码的内存"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"你可以使用info line命令来查看源代码在内存中的地址。info line后面可以跟“行号”，“函数名”，“文件名:行号”，“文件名:函数名”，这个命令会打印出所指定的源码在运行时的内存地址，如："}]},{"type":"element","tag":"code","props":{"code":"    (gdb) info line tst.c:func\n    Line 5 of \"tst.c\" starts at address 0x8048456 <func+6> and ends at 0x804845d <func+13>.\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    (gdb) info line tst.c:func\n    Line 5 of \"tst.c\" starts at address 0x8048456 <func+6> and ends at 0x804845d <func+13>."}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"还有一个命令（disassemble）你可以查看源程序的当前执行时的机器码，这个命令会把目前内存中的指令dump出来。如下面的示例表示查看函数func的汇编代码。"}]},{"type":"element","tag":"code","props":{"code":"    (gdb) disassemble func\n    Dump of assembler code for function func:\n    0x8048450 <func>:       push   %ebp\n    0x8048451 <func+1>:     mov    %esp,%ebp\n    0x8048453 <func+3>:     sub    $0x18,%esp\n    0x8048456 <func+6>:     movl   $0x0,0xfffffffc(%ebp)\n    0x804845d <func+13>:    movl   $0x1,0xfffffff8(%ebp)\n    0x8048464 <func+20>:    mov    0xfffffff8(%ebp),%eax\n    0x8048467 <func+23>:    cmp    0x8(%ebp),%eax\n    0x804846a <func+26>:    jle    0x8048470 <func+32>\n    0x804846c <func+28>:    jmp    0x8048480 <func+48>\n    0x804846e <func+30>:    mov    %esi,%esi\n    0x8048470 <func+32>:    mov    0xfffffff8(%ebp),%eax\n    0x8048473 <func+35>:    add    %eax,0xfffffffc(%ebp)\n    0x8048476 <func+38>:    incl   0xfffffff8(%ebp)\n    0x8048479 <func+41>:    jmp    0x8048464 <func+20>\n    0x804847b <func+43>:    nop\n    0x804847c <func+44>:    lea    0x0(%esi,1),%esi\n    0x8048480 <func+48>:    mov    0xfffffffc(%ebp),%edx\n    0x8048483 <func+51>:    mov    %edx,%eax\n    0x8048485 <func+53>:    jmp    0x8048487 <func+55>\n    0x8048487 <func+55>:    mov    %ebp,%esp\n    0x8048489 <func+57>:    pop    %ebp\n    0x804848a <func+58>:    ret\n    End of assembler dump.\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    (gdb) disassemble func\n    Dump of assembler code for function func:\n    0x8048450 <func>:       push   %ebp\n    0x8048451 <func+1>:     mov    %esp,%ebp\n    0x8048453 <func+3>:     sub    $0x18,%esp\n    0x8048456 <func+6>:     movl   $0x0,0xfffffffc(%ebp)\n    0x804845d <func+13>:    movl   $0x1,0xfffffff8(%ebp)\n    0x8048464 <func+20>:    mov    0xfffffff8(%ebp),%eax\n    0x8048467 <func+23>:    cmp    0x8(%ebp),%eax\n    0x804846a <func+26>:    jle    0x8048470 <func+32>\n    0x804846c <func+28>:    jmp    0x8048480 <func+48>\n    0x804846e <func+30>:    mov    %esi,%esi\n    0x8048470 <func+32>:    mov    0xfffffff8(%ebp),%eax\n    0x8048473 <func+35>:    add    %eax,0xfffffffc(%ebp)\n    0x8048476 <func+38>:    incl   0xfffffff8(%ebp)\n    0x8048479 <func+41>:    jmp    0x8048464 <func+20>\n    0x804847b <func+43>:    nop\n    0x804847c <func+44>:    lea    0x0(%esi,1),%esi\n    0x8048480 <func+48>:    mov    0xfffffffc(%ebp),%edx\n    0x8048483 <func+51>:    mov    %edx,%eax\n    0x8048485 <func+53>:    jmp    0x8048487 <func+55>\n    0x8048487 <func+55>:    mov    %ebp,%esp\n    0x8048489 <func+57>:    pop    %ebp\n    0x804848a <func+58>:    ret\n    End of assembler dump."}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"查看运行时数据-refer"},"children":[{"type":"text","value":"查看运行时数据 "},{"type":"element","tag":"a","props":{"href":"https://haoel.blog.csdn.net/article/details/2883","rel":["nofollow"]},"children":[{"type":"text","value":"refer"}]}]},{"type":"element","tag":"code","props":{"code":"在你调试程序时，当程序被停住时，你可以使用print命令（简写命令为p），或是同义命令inspect来查看当前程序的运行数据。print命令的格式是：\n\nprint <expr>\nprint /<f> <expr>\n    <expr>是表达式，是你所调试的程序的语言的表达式（GDB可以调试多种编程语言），<f>是输出的格式，比如，如果要把表达式按16进制的格式输出，那么就是/x。\n    \n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"在你调试程序时，当程序被停住时，你可以使用print命令（简写命令为p），或是同义命令inspect来查看当前程序的运行数据。print命令的格式是：\n\nprint <expr>\nprint /<f> <expr>\n    <expr>是表达式，是你所调试的程序的语言的表达式（GDB可以调试多种编程语言），<f>是输出的格式，比如，如果要把表达式按16进制的格式输出，那么就是/x。\n    "}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一、表达式"}]},{"type":"element","tag":"code","props":{"code":"print和许多GDB的命令一样，可以接受一个表达式，GDB会根据当前的程序运行的数据来计算这个表达式，既然是表达式，那么就可以是当前程序运行中的const常量、变量、函数等内容。可惜的是GDB不能使用你在程序中所定义的宏。\n\n表达式的语法应该是当前所调试的语言的语法，由于C/C++是一种大众型的语言，所以，本文中的例子都是关于C/C++的。（而关于用GDB调试其它语言的章节，我将在后面介绍）\n\n在表达式中，有几种GDB所支持的操作符，它们可以用在任何一种语言中。\n\n@\n    是一个和数组有关的操作符，在后面会有更详细的说明。\n    \n::\n    指定一个在文件或是一个函数中的变量。\n    \n{<type>} <addr>\n    表示一个指向内存地址<addr>的类型为type的一个对象。\n    \n    \n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"print和许多GDB的命令一样，可以接受一个表达式，GDB会根据当前的程序运行的数据来计算这个表达式，既然是表达式，那么就可以是当前程序运行中的const常量、变量、函数等内容。可惜的是GDB不能使用你在程序中所定义的宏。\n\n表达式的语法应该是当前所调试的语言的语法，由于C/C++是一种大众型的语言，所以，本文中的例子都是关于C/C++的。（而关于用GDB调试其它语言的章节，我将在后面介绍）\n\n在表达式中，有几种GDB所支持的操作符，它们可以用在任何一种语言中。\n\n@\n    是一个和数组有关的操作符，在后面会有更详细的说明。\n    \n::\n    指定一个在文件或是一个函数中的变量。\n    \n{<type>} <addr>\n    表示一个指向内存地址<addr>的类型为type的一个对象。\n    \n    "}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"二、程序变量"}]},{"type":"element","tag":"code","props":{"code":"在GDB中，你可以随时查看以下三种变量的值：\n    1、全局变量（所有文件可见的）\n    2、静态全局变量（当前文件可见的）\n    3、局部变量（当前Scope可见的）\n    \n如果你的局部变量和全局变量发生冲突（也就是重名），一般情况下是局部变量会隐藏全局变量，也就是说，如果一个全局变量和一个函数中的局部变量同名时，如果当前停止点在函数中，用print显示出的变量的值会是函数中的局部变量的值。如果此时你想查看全局变量的值时，你可以使用“::”操作符：\n\n    file::variable\nfunction::variable\n可以通过这种形式指定你所想查看的变量，是哪个文件中的或是哪个函数中的。例如，查看文件f2.c中的全局变量x的值：\n\ngdb) p 'f2.c'::x\n\n当然，“::”操作符会和C++中的发生冲突，GDB能自动识别“::” 是否C++的操作符，所以你不必担心在调试C++程序时会出现异常。\n\n另外，需要注意的是，如果你的程序编译时开启了优化选项，那么在用GDB调试被优化过的程序时，可能会发生某些变量不能访问，或是取值错误码的情况。这个是很正常的，因为优化程序会删改你的程序，整理你程序的语句顺序，剔除一些无意义的变量等，所以在GDB调试这种程序时，运行时的指令和你所编写指令就有不一样，也就会出现你所想象不到的结果。对付这种情况时，需要在编译程序时关闭编译优化。一般来说，几乎所有的编译器都支持编译优化的开关，例如，GNU的C/C++编译器GCC，你可以使用“-gstabs”选项来解决这个问题。关于编译器的参数，还请查看编译器的使用说明文档。\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"在GDB中，你可以随时查看以下三种变量的值：\n    1、全局变量（所有文件可见的）\n    2、静态全局变量（当前文件可见的）\n    3、局部变量（当前Scope可见的）\n    \n如果你的局部变量和全局变量发生冲突（也就是重名），一般情况下是局部变量会隐藏全局变量，也就是说，如果一个全局变量和一个函数中的局部变量同名时，如果当前停止点在函数中，用print显示出的变量的值会是函数中的局部变量的值。如果此时你想查看全局变量的值时，你可以使用“::”操作符：\n\n    file::variable\nfunction::variable\n可以通过这种形式指定你所想查看的变量，是哪个文件中的或是哪个函数中的。例如，查看文件f2.c中的全局变量x的值：\n\ngdb) p 'f2.c'::x\n\n当然，“::”操作符会和C++中的发生冲突，GDB能自动识别“::” 是否C++的操作符，所以你不必担心在调试C++程序时会出现异常。\n\n另外，需要注意的是，如果你的程序编译时开启了优化选项，那么在用GDB调试被优化过的程序时，可能会发生某些变量不能访问，或是取值错误码的情况。这个是很正常的，因为优化程序会删改你的程序，整理你程序的语句顺序，剔除一些无意义的变量等，所以在GDB调试这种程序时，运行时的指令和你所编写指令就有不一样，也就会出现你所想象不到的结果。对付这种情况时，需要在编译程序时关闭编译优化。一般来说，几乎所有的编译器都支持编译优化的开关，例如，GNU的C/C++编译器GCC，你可以使用“-gstabs”选项来解决这个问题。关于编译器的参数，还请查看编译器的使用说明文档。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"三、数组"}]},{"type":"element","tag":"code","props":{"code":"有时候，你需要查看一段连续的内存空间的值。比如数组的一段，或是动态分配的数据的大小。你可以使用GDB的“@”操作符，“@”的左边是第一个内存的地址的值，“@”的右边则你你想查看内存的长度。例如，你的程序中有这样的语句：\n \n    int *array = (int *) malloc (len * sizeof (int));\n    \n于是，在GDB调试过程中，你可以以如下命令显示出这个动态数组的取值：\n\n    p *array@len\n\n@的左边是数组的首地址的值，也就是变量array所指向的内容，右边则是数据的长度，其保存在变量len中，其输出结果，大约是下面这个样子的：\n\n    (gdb) p *array@len\n    $1 = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40}\n\n如果是静态数组的话，可以直接用print数组名，就可以显示数组中所有数据的内容了。\n\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"有时候，你需要查看一段连续的内存空间的值。比如数组的一段，或是动态分配的数据的大小。你可以使用GDB的“@”操作符，“@”的左边是第一个内存的地址的值，“@”的右边则你你想查看内存的长度。例如，你的程序中有这样的语句：\n \n    int *array = (int *) malloc (len * sizeof (int));\n    \n于是，在GDB调试过程中，你可以以如下命令显示出这个动态数组的取值：\n\n    p *array@len\n\n@的左边是数组的首地址的值，也就是变量array所指向的内容，右边则是数据的长度，其保存在变量len中，其输出结果，大约是下面这个样子的：\n\n    (gdb) p *array@len\n    $1 = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40}\n\n如果是静态数组的话，可以直接用print数组名，就可以显示数组中所有数据的内容了。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"四、输出格式"}]},{"type":"element","tag":"code","props":{"code":"一般来说，GDB会根据变量的类型输出变量的值。但你也可以自定义GDB的输出的格式。例如，你想输出一个整数的十六进制，或是二进制来查看这个整型变量的中的位的情况。要做到这样，你可以使用GDB的数据显示格式：\n\nx  按十六进制格式显示变量。\nd  按十进制格式显示变量。\nu  按十六进制格式显示无符号整型。\no  按八进制格式显示变量。\nt  按二进制格式显示变量。 \na  按十六进制格式显示变量。\nc  按字符格式显示变量。\nf  按浮点数格式显示变量。\n\n    (gdb) p i\n    $21 = 101    \n    \n    (gdb) p/a i\n    $22 = 0x65\n    \n    (gdb) p/c i\n    $23 = 101 'e'\n    \n    (gdb) p/f i\n    $24 = 1.41531145e-43\n    \n    (gdb) p/x i\n    $25 = 0x65\n    \n    (gdb) p/t i\n    $26 = 1100101\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"一般来说，GDB会根据变量的类型输出变量的值。但你也可以自定义GDB的输出的格式。例如，你想输出一个整数的十六进制，或是二进制来查看这个整型变量的中的位的情况。要做到这样，你可以使用GDB的数据显示格式：\n\nx  按十六进制格式显示变量。\nd  按十进制格式显示变量。\nu  按十六进制格式显示无符号整型。\no  按八进制格式显示变量。\nt  按二进制格式显示变量。 \na  按十六进制格式显示变量。\nc  按字符格式显示变量。\nf  按浮点数格式显示变量。\n\n    (gdb) p i\n    $21 = 101    \n    \n    (gdb) p/a i\n    $22 = 0x65\n    \n    (gdb) p/c i\n    $23 = 101 'e'\n    \n    (gdb) p/f i\n    $24 = 1.41531145e-43\n    \n    (gdb) p/x i\n    $25 = 0x65\n    \n    (gdb) p/t i\n    $26 = 1100101"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"五、查看内存"}]},{"type":"element","tag":"code","props":{"code":"你可以使用examine命令（简写是x）来查看内存地址中的值。x命令的语法如下所示：\n\nx/<n/f/u> <addr> \n\nn、f、u是可选的参数。\n\nn 是一个正整数，表示显示内存的长度，也就是说从当前地址向后显示几个地址的内容。\nf 表示显示的格式，参见上面。如果地址所指的是字符串，那么格式可以是s，如果地十是指令地址，那么格式可以是i。\nu 表示从当前地址往后请求的字节数，如果不指定的话，GDB默认是4个bytes。u参数可以用下面的字符来代替，b表示单字节，h表示双字节，w表示四字节，g表示八字节。当我们指定了字节长度后，GDB会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。\n\n<addr>表示一个内存地址。\n\nn/f/u三个参数可以一起使用。例如：\n\n命令：x/3uh 0x54320 表示，从内存地址0x54320读取内容，h表示以双字节为一个单位，3表示三个单位，u表示按十六进制显示。\n\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"你可以使用examine命令（简写是x）来查看内存地址中的值。x命令的语法如下所示：\n\nx/<n/f/u> <addr> \n\nn、f、u是可选的参数。\n\nn 是一个正整数，表示显示内存的长度，也就是说从当前地址向后显示几个地址的内容。\nf 表示显示的格式，参见上面。如果地址所指的是字符串，那么格式可以是s，如果地十是指令地址，那么格式可以是i。\nu 表示从当前地址往后请求的字节数，如果不指定的话，GDB默认是4个bytes。u参数可以用下面的字符来代替，b表示单字节，h表示双字节，w表示四字节，g表示八字节。当我们指定了字节长度后，GDB会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。\n\n<addr>表示一个内存地址。\n\nn/f/u三个参数可以一起使用。例如：\n\n命令：x/3uh 0x54320 表示，从内存地址0x54320读取内容，h表示以双字节为一个单位，3表示三个单位，u表示按十六进制显示。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"六、自动显示"}]},{"type":"element","tag":"code","props":{"code":"你可以设置一些自动显示的变量，当程序停住时，或是在你单步跟踪时，这些变量会自动显示。相关的GDB命令是display。\n\ndisplay <expr> \ndisplay/<fmt> <expr> \ndisplay/<fmt> <addr>\n\nexpr是一个表达式，fmt表示显示的格式，addr表示内存地址，当你用display设定好了一个或多个表达式后，只要你的程序被停下来，GDB会自动显示你所设置的这些表达式的值。\n\n格式i和s同样被display支持，一个非常有用的命令是：\n\n    display/i $pc\n\n$pc是GDB的环境变量，表示着指令的地址，/i则表示输出格式为机器指令码，也就是汇编。于是当程序停下后，就会出现源代码和机器指令码相对应的情形，这是一个很有意思的功能。\n\n下面是一些和display相关的GDB命令：\n\nundisplay <dnums...>\ndelete display <dnums...>\n删除自动显示，dnums意为所设置好了的自动显式的编号。如果要同时删除几个，编号可以用空格分隔，如果要删除一个范围内的编号，可以用减号表示（如：2-5）\n\ndisable display <dnums...>\nenable display <dnums...>\ndisable和enalbe不删除自动显示的设置，而只是让其失效和恢复。\n\ninfo display\n查看display设置的自动显示的信息。GDB会打出一张表格，向你报告当然调试中设置了多少个自动显示设置，其中包括，设置的编号，表达式，是否enable。\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"你可以设置一些自动显示的变量，当程序停住时，或是在你单步跟踪时，这些变量会自动显示。相关的GDB命令是display。\n\ndisplay <expr> \ndisplay/<fmt> <expr> \ndisplay/<fmt> <addr>\n\nexpr是一个表达式，fmt表示显示的格式，addr表示内存地址，当你用display设定好了一个或多个表达式后，只要你的程序被停下来，GDB会自动显示你所设置的这些表达式的值。\n\n格式i和s同样被display支持，一个非常有用的命令是：\n\n    display/i $pc\n\n$pc是GDB的环境变量，表示着指令的地址，/i则表示输出格式为机器指令码，也就是汇编。于是当程序停下后，就会出现源代码和机器指令码相对应的情形，这是一个很有意思的功能。\n\n下面是一些和display相关的GDB命令：\n\nundisplay <dnums...>\ndelete display <dnums...>\n删除自动显示，dnums意为所设置好了的自动显式的编号。如果要同时删除几个，编号可以用空格分隔，如果要删除一个范围内的编号，可以用减号表示（如：2-5）\n\ndisable display <dnums...>\nenable display <dnums...>\ndisable和enalbe不删除自动显示的设置，而只是让其失效和恢复。\n\ninfo display\n查看display设置的自动显示的信息。GDB会打出一张表格，向你报告当然调试中设置了多少个自动显示设置，其中包括，设置的编号，表达式，是否enable。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"七、设置显示选项 "},{"type":"element","tag":"a","props":{"href":"https://haoel.blog.csdn.net/article/details/2884","rel":["nofollow"]},"children":[{"type":"text","value":"refer"}]}]},{"type":"element","tag":"code","props":{"code":"GDB中关于显示的选项比较多，这里我只例举大多数常用的选项。\n\nset print address \nset print address on \n    打开地址输出，当程序显示函数信息时，GDB会显出函数的参数地址。系统默认为打开的，如：\n    \n    (gdb) f\n    #0  set_quotes (lq=0x34c78 \"<<\", rq=0x34c88 \">>\")\n        at input.c:530\n    530         if (lquote != def_lquote)\n\n\nset print address off \n    关闭函数的参数地址显示，如：\n    \n    (gdb) set print addr off\n    (gdb) f\n    #0  set_quotes (lq=\"<<\", rq=\">>\") at input.c:530\n    530         if (lquote != def_lquote)\n\nshow print address \n    查看当前地址显示选项是否打开。\n    \nset print array \nset print array on \n    打开数组显示，打开后当数组显示时，每个元素占一行，如果不打开的话，每个元素则以逗号分隔。这个选项默认是关闭的。与之相关的两个命令如下，我就不再多说了。\n    \nset print array off \nshow print array\n\nset print elements <number-of-elements>\n    这个选项主要是设置数组的，如果你的数组太大了，那么就可以指定一个<number-of-elements>来指定数据显示的最大长度，当到达这个长度时，GDB就不再往下显示了。如果设置为0，则表示不限制。\n    \nshow print elements \n    查看print elements的选项信息。\n    \nset print null-stop <on/off>\n    如果打开了这个选项，那么当显示字符串时，遇到结束符则停止显示。这个选项默认为off。\n    \nset print pretty on \n    如果打开printf pretty这个选项，那么当GDB显示结构体时会比较漂亮。如：\n\n        $1 = {\n          next = 0x0,\n          flags = {\n            sweet = 1,\n            sour = 1\n          },\n          meat = 0x54 \"Pork\"\n        }\n\nset print pretty off\n    关闭printf pretty这个选项，GDB显示结构体时会如下显示：\n    \n        $1 = {next = 0x0, flags = {sweet = 1, sour = 1}, meat = 0x54 \"Pork\"}\n        \nshow print pretty \n    查看GDB是如何显示结构体的。\n    \n\nset print sevenbit-strings <on/off>\n    设置字符显示，是否按“/nnn”的格式显示，如果打开，则字符串或字符数据按/nnn显示，如“/065”。\n\nshow print sevenbit-strings\n    查看字符显示开关是否打开。 \n    \nset print union <on/off>\n    设置显示结构体时，是否显式其内的联合体数据。例如有以下数据结构：\n    \n    typedef enum {Tree, Bug} Species;\n    typedef enum {Big_tree, Acorn, Seedling} Tree_forms;\n    typedef enum {Caterpillar, Cocoon, Butterfly}\n                  Bug_forms;\n    \n    struct thing {\n      Species it;\n      union {\n        Tree_forms tree;\n        Bug_forms bug;\n      } form;\n    };\n    \n    struct thing foo = {Tree, {Acorn}};\n\n    当打开这个开关时，执行 p foo 命令后，会如下显示：\n        $1 = {it = Tree, form = {tree = Acorn, bug = Cocoon}}\n    \n    当关闭这个开关时，执行 p foo 命令后，会如下显示：\n        $1 = {it = Tree, form = {...}}\n\nshow print union\n    查看联合体数据的显示方式\n    \nset print object <on/off>\n    在C++中，如果一个对象指针指向其派生类，如果打开这个选项，GDB会自动按照虚方法调用的规则显示输出，如果关闭这个选项的话，GDB就不管虚函数表了。这个选项默认是off。\n\nshow print object\n    查看对象选项的设置。\n    \nset print static-members <on/off>\n    这个选项表示，当显示一个C++对象中的内容是，是否显示其中的静态数据成员。默认是on。\n\nshow print static-members\n    查看静态数据成员选项设置。\n    \nset print vtbl <on/off>\n    当此选项打开时，GDB将用比较规整的格式来显示虚函数表时。其默认是关闭的。\n    \nshow print vtbl\n    查看虚函数显示格式的选项。\n    \n    \n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"GDB中关于显示的选项比较多，这里我只例举大多数常用的选项。\n\nset print address \nset print address on \n    打开地址输出，当程序显示函数信息时，GDB会显出函数的参数地址。系统默认为打开的，如：\n    \n    (gdb) f\n    #0  set_quotes (lq=0x34c78 \"<<\", rq=0x34c88 \">>\")\n        at input.c:530\n    530         if (lquote != def_lquote)\n\n\nset print address off \n    关闭函数的参数地址显示，如：\n    \n    (gdb) set print addr off\n    (gdb) f\n    #0  set_quotes (lq=\"<<\", rq=\">>\") at input.c:530\n    530         if (lquote != def_lquote)\n\nshow print address \n    查看当前地址显示选项是否打开。\n    \nset print array \nset print array on \n    打开数组显示，打开后当数组显示时，每个元素占一行，如果不打开的话，每个元素则以逗号分隔。这个选项默认是关闭的。与之相关的两个命令如下，我就不再多说了。\n    \nset print array off \nshow print array\n\nset print elements <number-of-elements>\n    这个选项主要是设置数组的，如果你的数组太大了，那么就可以指定一个<number-of-elements>来指定数据显示的最大长度，当到达这个长度时，GDB就不再往下显示了。如果设置为0，则表示不限制。\n    \nshow print elements \n    查看print elements的选项信息。\n    \nset print null-stop <on/off>\n    如果打开了这个选项，那么当显示字符串时，遇到结束符则停止显示。这个选项默认为off。\n    \nset print pretty on \n    如果打开printf pretty这个选项，那么当GDB显示结构体时会比较漂亮。如：\n\n        $1 = {\n          next = 0x0,\n          flags = {\n            sweet = 1,\n            sour = 1\n          },\n          meat = 0x54 \"Pork\"\n        }\n\nset print pretty off\n    关闭printf pretty这个选项，GDB显示结构体时会如下显示：\n    \n        $1 = {next = 0x0, flags = {sweet = 1, sour = 1}, meat = 0x54 \"Pork\"}\n        \nshow print pretty \n    查看GDB是如何显示结构体的。\n    \n\nset print sevenbit-strings <on/off>\n    设置字符显示，是否按“/nnn”的格式显示，如果打开，则字符串或字符数据按/nnn显示，如“/065”。\n\nshow print sevenbit-strings\n    查看字符显示开关是否打开。 \n    \nset print union <on/off>\n    设置显示结构体时，是否显式其内的联合体数据。例如有以下数据结构：\n    \n    typedef enum {Tree, Bug} Species;\n    typedef enum {Big_tree, Acorn, Seedling} Tree_forms;\n    typedef enum {Caterpillar, Cocoon, Butterfly}\n                  Bug_forms;\n    \n    struct thing {\n      Species it;\n      union {\n        Tree_forms tree;\n        Bug_forms bug;\n      } form;\n    };\n    \n    struct thing foo = {Tree, {Acorn}};\n\n    当打开这个开关时，执行 p foo 命令后，会如下显示：\n        $1 = {it = Tree, form = {tree = Acorn, bug = Cocoon}}\n    \n    当关闭这个开关时，执行 p foo 命令后，会如下显示：\n        $1 = {it = Tree, form = {...}}\n\nshow print union\n    查看联合体数据的显示方式\n    \nset print object <on/off>\n    在C++中，如果一个对象指针指向其派生类，如果打开这个选项，GDB会自动按照虚方法调用的规则显示输出，如果关闭这个选项的话，GDB就不管虚函数表了。这个选项默认是off。\n\nshow print object\n    查看对象选项的设置。\n    \nset print static-members <on/off>\n    这个选项表示，当显示一个C++对象中的内容是，是否显示其中的静态数据成员。默认是on。\n\nshow print static-members\n    查看静态数据成员选项设置。\n    \nset print vtbl <on/off>\n    当此选项打开时，GDB将用比较规整的格式来显示虚函数表时。其默认是关闭的。\n    \nshow print vtbl\n    查看虚函数显示格式的选项。\n    \n    "}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"八、历史记录"}]},{"type":"element","tag":"code","props":{"code":"当你用GDB的print查看程序运行时的数据时，你每一个print都会被GDB记录下来。GDB会以$1, $2, $3 .....这样的方式为你每一个print命令编上号。于是，你可以使用这个编号访问以前的表达式，如$1。这个功能所带来的好处是，如果你先前输入了一个比较长的表达式，如果你还想查看这个表达式的值，你可以使用历史记录来访问，省去了重复输入。\n\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"当你用GDB的print查看程序运行时的数据时，你每一个print都会被GDB记录下来。GDB会以$1, $2, $3 .....这样的方式为你每一个print命令编上号。于是，你可以使用这个编号访问以前的表达式，如$1。这个功能所带来的好处是，如果你先前输入了一个比较长的表达式，如果你还想查看这个表达式的值，你可以使用历史记录来访问，省去了重复输入。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"九、GDB环境变量"}]},{"type":"element","tag":"code","props":{"code":"你可以在GDB的调试环境中定义自己的变量，用来保存一些调试程序中的运行数据。要定义一个GDB的变量很简单只需。使用GDB的set命令。GDB的环境变量和UNIX一样，也是以$起头。如：\n\nset $foo = *object_ptr\n\n使用环境变量时，GDB会在你第一次使用时创建这个变量，而在以后的使用中，则直接对其賦值。环境变量没有类型，你可以给环境变量定义任一的类型。包括结构体和数组。\n\nshow convenience \n    该命令查看当前所设置的所有的环境变量。\n    \n这是一个比较强大的功能，环境变量和程序变量的交互使用，将使得程序调试更为灵活便捷。例如：\n\n    set $i = 0\n    print bar[$i++]->contents\n\n于是，当你就不必，print bar[0]->contents, print bar[1]->contents地输入命令了。输入这样的命令后，只用敲回车，重复执行上一条语句，环境变量会自动累加，从而完成逐个输出的功能。\n\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"你可以在GDB的调试环境中定义自己的变量，用来保存一些调试程序中的运行数据。要定义一个GDB的变量很简单只需。使用GDB的set命令。GDB的环境变量和UNIX一样，也是以$起头。如：\n\nset $foo = *object_ptr\n\n使用环境变量时，GDB会在你第一次使用时创建这个变量，而在以后的使用中，则直接对其賦值。环境变量没有类型，你可以给环境变量定义任一的类型。包括结构体和数组。\n\nshow convenience \n    该命令查看当前所设置的所有的环境变量。\n    \n这是一个比较强大的功能，环境变量和程序变量的交互使用，将使得程序调试更为灵活便捷。例如：\n\n    set $i = 0\n    print bar[$i++]->contents\n\n于是，当你就不必，print bar[0]->contents, print bar[1]->contents地输入命令了。输入这样的命令后，只用敲回车，重复执行上一条语句，环境变量会自动累加，从而完成逐个输出的功能。"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"十、查看寄存器"}]},{"type":"element","tag":"code","props":{"code":"要查看寄存器的值，很简单，可以使用如下命令：\n\ninfo registers \n    查看寄存器的情况。（除了浮点寄存器）\n\ninfo all-registers\n    查看所有寄存器的情况。（包括浮点寄存器）\n\ninfo registers <regname ...>\n    查看所指定的寄存器的情况。\n    \n寄存器中放置了程序运行时的数据，比如程序当前运行的指令地址（ip），程序的当前堆栈地址（sp）等等。你同样可以使用print命令来访问寄存器的情况，只需要在寄存器名字前加一个$符号就可以了。如：p $eip。\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"要查看寄存器的值，很简单，可以使用如下命令：\n\ninfo registers \n    查看寄存器的情况。（除了浮点寄存器）\n\ninfo all-registers\n    查看所有寄存器的情况。（包括浮点寄存器）\n\ninfo registers <regname ...>\n    查看所指定的寄存器的情况。\n    \n寄存器中放置了程序运行时的数据，比如程序当前运行的指令地址（ip），程序的当前堆栈地址（sp）等等。你同样可以使用print命令来访问寄存器的情况，只需要在寄存器名字前加一个$符号就可以了。如：p $eip。"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"改变程序的执行"},"children":[{"type":"text","value":"改变程序的执行"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/haoel/article/details/2885","rel":["nofollow"]},"children":[{"type":"text","value":"refer"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一旦使用GDB挂上被调试程序，当程序运行起来后，你可以根据自己的调试思路来动态地在GDB中更改当前被调试程序的运行线路或是其变量的值，这个强大的功能能够让你更好的调试你的程序，比如，你可以在程序的一次运行中走遍程序的所有分支。"}]},{"type":"element","tag":"h3","props":{"id":"修改变量值"},"children":[{"type":"text","value":"修改变量值"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"修改被调试程序运行时的变量值，在GDB中很容易实现，使用GDB的print命令即可完成。如："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"(gdb) print x=4"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"x=4这个表达式是C/C++的语法，意为把变量x的值修改为4，如果你当前调试的语言是Pascal，那么你可以使用Pascal的语法：x:=4。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在某些时候，很有可能你的变量和GDB中的参数冲突，如："}]},{"type":"element","tag":"code","props":{"code":"(gdb) whatis width\ntype = double\n(gdb) p width\n$4 = 13\n(gdb) set width=47\nInvalid syntax in expression.\n","language":"shell","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") whatis width"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"type"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"double"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") p width"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"$4"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" = "}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"13"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"gdb"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":") set width"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-3584d7"},"children":[{"type":"text","value":"47"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-3467fb"},"children":[{"type":"text","value":"Invalid"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"syntax"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"in"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a602f9"},"children":[{"type":"text","value":"expression."}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"因为，set width是GDB的命令，所以，出现了“Invalid syntax in expression”的设置错误，此时，你可以使用set var命令来告诉GDB，width不是你GDB的参数，而是程序的变量名，如："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"(gdb) set var width=47"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"另外，还可能有些情况，GDB并不报告这种错误，所以保险起见，在你改变程序变量取值时，最好都使用set var格式的GDB命令。"}]},{"type":"element","tag":"h3","props":{"id":"跳转执行"},"children":[{"type":"text","value":"跳转执行"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一般来说，被调试程序会按照程序代码的运行顺序依次执行。GDB提供了乱序执行的功能，也就是说，GDB可以修改程序的执行顺序，可以让程序执行随意跳跃。这个功能可以由GDB的jump命令来完："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"jump <linespec>"}]},{"type":"text","value":"\n指定下一条语句的运行点。"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<linespce>"}]},{"type":"text","value":"可以是文件的行号，可以是file:line格式，可以是+num这种偏移量格式。表式着下一条运行语句从哪里开始。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"jump <address>"}]},{"type":"text","value":"\n这里的"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<address>"}]},{"type":"text","value":"是代码行的内存地址。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"注意，jump命令不会改变当前的程序栈中的内容，所以，当你从一个函数跳到另一个函数时，当函数运行完返回时进行弹栈操作时必然会发生错误，可能结果还是非常奇怪的，甚至于产生程序Core Dump。所以最好是同一个函数中进行跳转。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"熟悉汇编的人都知道，程序运行时，有一个寄存器用于保存当前代码所在的内存地址。所以，jump命令也就是改变了这个寄存器中的值。于是，你可以使用“set $pc”来更改跳转执行的地址。如："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"set $pc = 0x485"}]}]},{"type":"element","tag":"h3","props":{"id":"产生信号量"},"children":[{"type":"text","value":"产生信号量"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用singal命令，可以产生一个信号量给被调试的程序。如：中断信号Ctrl+C。这非常方便于程序的调试，可以在程序运行的任意位置设置断点，并在该断点用GDB产生一个信号量，这种精确地在某处产生信号非常有利程序的调试。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"语法是："},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"signal <singal>"}]},{"type":"text","value":"，UNIX的系统信号量通常从1到15。所以"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<singal>"}]},{"type":"text","value":"取值也在这个范围。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"single命令和shell的kill命令不同，系统的kill命令发信号给被调试程序时，是由GDB截获的，而single命令所发出一信号则是直接发给被调试程序的。"}]},{"type":"element","tag":"h3","props":{"id":"强制函数返回"},"children":[{"type":"text","value":"强制函数返回"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果你的调试断点在某个函数中，并还有语句没有执行完。你可以使用return命令强制函数忽略还没有执行的语句并返回。"}]},{"type":"element","tag":"code","props":{"code":"return\nreturn <expression>\n","language":"shell","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"return"}]}]},{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-50977c"},"children":[{"type":"text","value":"expression"}]},{"type":"element","tag":"span","props":{"class":"ct-4ce865"},"children":[{"type":"text","value":">"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用return命令取消当前函数的执行，并立即返回，如果指定了"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<expression>"}]},{"type":"text","value":"，那么该表达式的值会被认作函数的返回值。"}]},{"type":"element","tag":"h3","props":{"id":"强制调用函数"},"children":[{"type":"text","value":"强制调用函数"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"call <expr>"}]},{"type":"text","value":"\n表达式中可以一是函数，以此达到强制调用函数的目的。并显示函数的返回值，如果函数返回值是void，那么就不显示。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"另一个相似的命令也可以完成这一功能——print，print后面可以跟表达式，所以也可以用他来调用函数，print和call的不同是，如果函数返回void，call则不显示，print则显示函数返回值，并把该值存入历史数据中。"}]},{"type":"element","tag":"style","children":[{"type":"text","value":".ct-268fcd{color:#8250DF}\n.ct-f54dad{color:#6E7781}\n.ct-3584d7{color:#0550AE}\n.ct-4ce865{color:#CF222E}\n.ct-a602f9{color:#0A3069}\n.ct-50977c{color:#24292F}\n.ct-3467fb{color:#953800}\n.dark .ct-3467fb{color:#FFA657}\n.dark .ct-50977c{color:#C9D1D9}\n.dark .ct-a602f9{color:#A5D6FF}\n.dark .ct-4ce865{color:#FF7B72}\n.dark .ct-3584d7{color:#79C0FF}\n.dark .ct-f54dad{color:#8B949E}\n.dark .ct-268fcd{color:#D2A8FF}"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"use","depth":2,"text":"use"},{"id":"gdb的命令概貌","depth":2,"text":"GDB的命令概貌"},{"id":"run","depth":2,"text":"run","children":[{"id":"layout","depth":3,"text":"layout"},{"id":"gdb中运行unix的shell程序","depth":3,"text":"GDB中运行UNIX的shell程序"},{"id":"在gdb中运行程序","depth":3,"text":"在GDB中运行程序"},{"id":"调试已运行的程序","depth":3,"text":"调试已运行的程序"},{"id":"暂停-恢复程序运行","depth":3,"text":"暂停 / 恢复程序运行"},{"id":"查看栈信息-refer","depth":3,"text":"查看栈信息 refer"}]},{"id":"查看源程序","depth":2,"text":"查看源程序"},{"id":"查看运行时数据-refer","depth":2,"text":"查看运行时数据 refer"},{"id":"改变程序的执行","depth":2,"text":"改变程序的执行","children":[{"id":"修改变量值","depth":3,"text":"修改变量值"},{"id":"跳转执行","depth":3,"text":"跳转执行"},{"id":"产生信号量","depth":3,"text":"产生信号量"},{"id":"强制函数返回","depth":3,"text":"强制函数返回"},{"id":"强制调用函数","depth":3,"text":"强制调用函数"}]}]}},"_type":"markdown","_id":"content:5.notes:linux:gdb.md","_source":"content","_file":"5.notes/linux/gdb.md","_extension":"md"}