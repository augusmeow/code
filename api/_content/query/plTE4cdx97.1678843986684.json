{"_path":"/cpp/concept/const","_dir":"concept","_draft":false,"_partial":false,"_locale":"","_empty":false,"title":"const","description":"","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"const"},"children":[{"type":"text","value":"const"}]},{"type":"element","tag":"h2","props":{"id":"如何在const成员函数中赋值"},"children":[{"type":"text","value":"如何在const成员函数中赋值？"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"mutable"}]},{"type":"text","value":"去掉const的成员函数的const性质"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"为什么要有这种去除常量标志的需求？"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"两个概念：物理常量性和逻辑常量性"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"物理常量性：实际上就是常量。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"逻辑常量性：对用户而言是常量，但在用户不能访问的细节上不是常量。"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"const_cast和mutable的比较"},"children":[{"type":"text","value":"const_cast和mutable的比较"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"const_cast:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"强制去掉对象的const属性。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"缺点：对const对象，调用包含const_cast的const成员函数，属于未定义行为。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"mutable:"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用场景：对可能要发生变化的成员前，加上存储描述符mutable。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"实质：对加了mutable的成员，无视所有const声明。"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"const-与-define-的比较const有什么优点"},"children":[{"type":"text","value":"const 与 #define 的比较，const有什么优点?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"const 常量有数据类型，而宏常量没有数据类型。编译器可以对前者进行类型安全检查。而对后者只进行字符替换，没有类型安全检查，并且在字符替换可能会产生意料不到的错误（边际效应）\n。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"有些集成化的调试工具可以对 const 常量进行调试，但是不能对宏常量进行调试。"}]}]},{"type":"element","tag":"h2","props":{"id":"conststatic-关键字有什么区别"},"children":[{"type":"text","value":"const、static 关键字有什么区别"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"const"}]},{"type":"text","value":"和"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"static"}]},{"type":"text","value":"都是用于声明变量时的修饰符，它们都能被用来修饰一个变量的作用域、生命周期和内存分配方式。但是，它们之间还是有一些区别的："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"const"}]},{"type":"text","value":"用于声明一个变量时，它表示这个变量的值不能被修改。也就是说，如果一个变量被声明为"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"const"}]},{"type":"text","value":"，它的值在程序执行过程中是固定的，不能被修改。"},{"type":"element","tag":"code","props":{"code":"const int x = 5;  // 声明一个名为x，值为5的常量\n","language":"cpp","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-35a329"},"children":[{"type":"text","value":"const"}]},{"type":"element","tag":"span","props":{"class":"ct-a33eaa"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-35a329"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-a33eaa"},"children":[{"type":"text","value":" x "}]},{"type":"element","tag":"span","props":{"class":"ct-35a329"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-a33eaa"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a0ba3c"},"children":[{"type":"text","value":"5"}]},{"type":"element","tag":"span","props":{"class":"ct-a33eaa"},"children":[{"type":"text","value":";"}]},{"type":"element","tag":"span","props":{"class":"ct-7f07b0"},"children":[{"type":"text","value":"  // 声明一个名为x，值为5的常量"}]}]}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"static"}]},{"type":"text","value":"用于声明一个变量时，它表示这个变量的作用域为整个程序，而不是局限于特定的函数或块。如果一个变量被声明为"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"static"}]},{"type":"text","value":"，它在程序开始执行时会分配内存，并在程序结束时释放内存。此外，如果一个"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"static"}]},{"type":"text","value":"变量在多个函数中被访问，那么它的值只会被初始化一次。"},{"type":"element","tag":"code","props":{"code":"static int x = 5;  // 声明一个名为x，值为5的静态变量\n","language":"cpp","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"div","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-35a329"},"children":[{"type":"text","value":"static"}]},{"type":"element","tag":"span","props":{"class":"ct-a33eaa"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-35a329"},"children":[{"type":"text","value":"int"}]},{"type":"element","tag":"span","props":{"class":"ct-a33eaa"},"children":[{"type":"text","value":" x "}]},{"type":"element","tag":"span","props":{"class":"ct-35a329"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-a33eaa"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-a0ba3c"},"children":[{"type":"text","value":"5"}]},{"type":"element","tag":"span","props":{"class":"ct-a33eaa"},"children":[{"type":"text","value":";"}]},{"type":"element","tag":"span","props":{"class":"ct-7f07b0"},"children":[{"type":"text","value":"  // 声明一个名为x，值为5的静态变量"}]}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"综上，"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"const"}]},{"type":"text","value":"和"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"static"}]},{"type":"text","value":"都是用来声明变量的修饰符，但它们之间的区别在于："},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"const"}]},{"type":"text","value":"用来保证变量值不能被修改，而"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"static"}]},{"type":"text","value":"用来保证变量的作用域和生命周期。"}]},{"type":"element","tag":"h2","props":{"id":"如何初始化const和static数据成员"},"children":[{"type":"text","value":"如何初始化const和static数据成员？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"通常在类外初始化static数据成员，但是 static const 的整型(ool，char，int，long)可以再类声明中初始化， static\nconst的其他类型也必须在类外初始化(包括整型的数组)。"}]},{"type":"element","tag":"style","children":[{"type":"text","value":".ct-7f07b0{color:#6E7781}\n.ct-a0ba3c{color:#0550AE}\n.ct-a33eaa{color:#24292F}\n.ct-35a329{color:#CF222E}\n.dark .ct-35a329{color:#FF7B72}\n.dark .ct-a33eaa{color:#C9D1D9}\n.dark .ct-a0ba3c{color:#79C0FF}\n.dark .ct-7f07b0{color:#8B949E}"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"如何在const成员函数中赋值","depth":2,"text":"如何在const成员函数中赋值？"},{"id":"const_cast和mutable的比较","depth":2,"text":"const_cast和mutable的比较"},{"id":"const-与-define-的比较const有什么优点","depth":2,"text":"const 与 #define 的比较，const有什么优点?"},{"id":"conststatic-关键字有什么区别","depth":2,"text":"const、static 关键字有什么区别"},{"id":"如何初始化const和static数据成员","depth":2,"text":"如何初始化const和static数据成员？"}]}},"_type":"markdown","_id":"content:1.cpp:concept:const.md","_source":"content","_file":"1.cpp/concept/const.md","_extension":"md"}